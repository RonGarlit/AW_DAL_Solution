

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AW_PersonDAL\App.config"
//     Connection String Name: "AW2016_PersDb"
//     Connection String:      "Data Source=DESKTOP-PDAFJ6Q;Initial Catalog=AdventureWorks2016;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 13.0.5026.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AW_PersonDAL
{
    using System.Linq;

    #region Unit of work

    public interface IPersDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Person_AddressEntity> Person_Addresses { get; set; } // Address
        System.Data.Entity.DbSet<Person_AddressTypeEntity> Person_AddressTypes { get; set; } // AddressType
        System.Data.Entity.DbSet<Person_BusinessEntityEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        System.Data.Entity.DbSet<Person_BusinessEntityAddressEntity> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        System.Data.Entity.DbSet<Person_BusinessEntityContactEntity> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        System.Data.Entity.DbSet<Person_ContactTypeEntity> Person_ContactTypes { get; set; } // ContactType
        System.Data.Entity.DbSet<Person_CountryRegionEntity> Person_CountryRegions { get; set; } // CountryRegion
        System.Data.Entity.DbSet<Person_EmailAddressEntity> Person_EmailAddresses { get; set; } // EmailAddress
        System.Data.Entity.DbSet<Person_PasswordEntity> Person_Passwords { get; set; } // Password
        System.Data.Entity.DbSet<Person_PersonEntity> Person_People { get; set; } // Person
        System.Data.Entity.DbSet<Person_PersonPhoneEntity> Person_PersonPhones { get; set; } // PersonPhone
        System.Data.Entity.DbSet<Person_PhoneNumberTypeEntity> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        System.Data.Entity.DbSet<Person_StateProvinceEntity> Person_StateProvinces { get; set; } // StateProvince
        System.Data.Entity.DbSet<Person_VAdditionalContactInfoEntity> Person_VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        System.Data.Entity.DbSet<Person_VStateProvinceCountryRegionEntity> Person_VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class PersDbContext : System.Data.Entity.DbContext, IPersDbContext
    {
        public System.Data.Entity.DbSet<Person_AddressEntity> Person_Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<Person_AddressTypeEntity> Person_AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<Person_BusinessEntityEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        public System.Data.Entity.DbSet<Person_BusinessEntityAddressEntity> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        public System.Data.Entity.DbSet<Person_BusinessEntityContactEntity> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        public System.Data.Entity.DbSet<Person_ContactTypeEntity> Person_ContactTypes { get; set; } // ContactType
        public System.Data.Entity.DbSet<Person_CountryRegionEntity> Person_CountryRegions { get; set; } // CountryRegion
        public System.Data.Entity.DbSet<Person_EmailAddressEntity> Person_EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<Person_PasswordEntity> Person_Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person_PersonEntity> Person_People { get; set; } // Person
        public System.Data.Entity.DbSet<Person_PersonPhoneEntity> Person_PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<Person_PhoneNumberTypeEntity> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<Person_StateProvinceEntity> Person_StateProvinces { get; set; } // StateProvince
        public System.Data.Entity.DbSet<Person_VAdditionalContactInfoEntity> Person_VAdditionalContactInfoes { get; set; } // vAdditionalContactInfo
        public System.Data.Entity.DbSet<Person_VStateProvinceCountryRegionEntity> Person_VStateProvinceCountryRegions { get; set; } // vStateProvinceCountryRegion

        static PersDbContext()
        {
            System.Data.Entity.Database.SetInitializer<PersDbContext>(null);
        }

        public PersDbContext()
            : base("Name=AW2016_PersDb")
        {
        }

        public PersDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public PersDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public PersDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public PersDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new Person_AddressEntityMapping());
            modelBuilder.Configurations.Add(new Person_AddressTypeEntityMapping());
            modelBuilder.Configurations.Add(new Person_BusinessEntityEntityMapping());
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressEntityMapping());
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactEntityMapping());
            modelBuilder.Configurations.Add(new Person_ContactTypeEntityMapping());
            modelBuilder.Configurations.Add(new Person_CountryRegionEntityMapping());
            modelBuilder.Configurations.Add(new Person_EmailAddressEntityMapping());
            modelBuilder.Configurations.Add(new Person_PasswordEntityMapping());
            modelBuilder.Configurations.Add(new Person_PersonEntityMapping());
            modelBuilder.Configurations.Add(new Person_PersonPhoneEntityMapping());
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeEntityMapping());
            modelBuilder.Configurations.Add(new Person_StateProvinceEntityMapping());
            modelBuilder.Configurations.Add(new Person_VAdditionalContactInfoEntityMapping());
            modelBuilder.Configurations.Add(new Person_VStateProvinceCountryRegionEntityMapping());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new Person_AddressEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_AddressTypeEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_ContactTypeEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_CountryRegionEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_EmailAddressEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_PasswordEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_PersonEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_PersonPhoneEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_StateProvinceEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_VAdditionalContactInfoEntityMapping(schema));
            modelBuilder.Configurations.Add(new Person_VStateProvinceCountryRegionEntityMapping(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class PersDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<PersDbContext>
    {
        public PersDbContext Create()
        {
            return new PersDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakePersDbContext : IPersDbContext
    {
        public System.Data.Entity.DbSet<Person_AddressEntity> Person_Addresses { get; set; }
        public System.Data.Entity.DbSet<Person_AddressTypeEntity> Person_AddressTypes { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntityEntity> Person_BusinessEntities { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntityAddressEntity> Person_BusinessEntityAddresses { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntityContactEntity> Person_BusinessEntityContacts { get; set; }
        public System.Data.Entity.DbSet<Person_ContactTypeEntity> Person_ContactTypes { get; set; }
        public System.Data.Entity.DbSet<Person_CountryRegionEntity> Person_CountryRegions { get; set; }
        public System.Data.Entity.DbSet<Person_EmailAddressEntity> Person_EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<Person_PasswordEntity> Person_Passwords { get; set; }
        public System.Data.Entity.DbSet<Person_PersonEntity> Person_People { get; set; }
        public System.Data.Entity.DbSet<Person_PersonPhoneEntity> Person_PersonPhones { get; set; }
        public System.Data.Entity.DbSet<Person_PhoneNumberTypeEntity> Person_PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<Person_StateProvinceEntity> Person_StateProvinces { get; set; }
        public System.Data.Entity.DbSet<Person_VAdditionalContactInfoEntity> Person_VAdditionalContactInfoes { get; set; }
        public System.Data.Entity.DbSet<Person_VStateProvinceCountryRegionEntity> Person_VStateProvinceCountryRegions { get; set; }

        public FakePersDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Person_Addresses = new FakeDbSet<Person_AddressEntity>("AddressId");
            Person_AddressTypes = new FakeDbSet<Person_AddressTypeEntity>("AddressTypeId");
            Person_BusinessEntities = new FakeDbSet<Person_BusinessEntityEntity>("BusinessEntityId");
            Person_BusinessEntityAddresses = new FakeDbSet<Person_BusinessEntityAddressEntity>("BusinessEntityId", "AddressId", "AddressTypeId");
            Person_BusinessEntityContacts = new FakeDbSet<Person_BusinessEntityContactEntity>("BusinessEntityId", "PersonId", "ContactTypeId");
            Person_ContactTypes = new FakeDbSet<Person_ContactTypeEntity>("ContactTypeId");
            Person_CountryRegions = new FakeDbSet<Person_CountryRegionEntity>("CountryRegionCode");
            Person_EmailAddresses = new FakeDbSet<Person_EmailAddressEntity>("BusinessEntityId", "EmailAddressId");
            Person_Passwords = new FakeDbSet<Person_PasswordEntity>("BusinessEntityId");
            Person_People = new FakeDbSet<Person_PersonEntity>("BusinessEntityId");
            Person_PersonPhones = new FakeDbSet<Person_PersonPhoneEntity>("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");
            Person_PhoneNumberTypes = new FakeDbSet<Person_PhoneNumberTypeEntity>("PhoneNumberTypeId");
            Person_StateProvinces = new FakeDbSet<Person_StateProvinceEntity>("StateProvinceId");
            Person_VAdditionalContactInfoes = new FakeDbSet<Person_VAdditionalContactInfoEntity>("BusinessEntityId", "FirstName", "LastName", "Rowguid", "ModifiedDate");
            Person_VStateProvinceCountryRegions = new FakeDbSet<Person_VStateProvinceCountryRegionEntity>("StateProvinceId", "StateProvinceCode", "IsOnlyStateProvinceFlag", "StateProvinceName", "TerritoryId", "CountryRegionCode", "CountryRegionName");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Address
    ///<summary>
    /// Street address information for customers, employees, and vendors.
    ///</summary>
    [Table("Address", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_AddressEntity
    {

        ///<summary>
        /// Primary key for Address records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"AddressID", Order = 1, TypeName = "int")]
        [Index(@"PK_Address_AddressID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address ID")]
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// First street address line.
        ///</summary>
        [Column(@"AddressLine1", Order = 2, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 1")]
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)

        ///<summary>
        /// Second street address line.
        ///</summary>
        [Column(@"AddressLine2", Order = 3, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 2, IsUnique = true, IsClustered = false)]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 2")]
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        ///<summary>
        /// Name of the city.
        ///</summary>
        [Column(@"City", Order = 4, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 3, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "City")]
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// Unique identification number for the state or province. Foreign key to StateProvince table.
        ///</summary>
        [Column(@"StateProvinceID", Order = 5, TypeName = "int")]
        [Index(@"IX_Address_StateProvinceID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 4, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "State province ID")]
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// Postal code for the street address.
        ///</summary>
        [Column(@"PostalCode", Order = 6, TypeName = "nvarchar")]
        [Index(@"IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode", 5, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (length: 15)

        ///<summary>
        /// Latitude and longitude of this address.
        ///</summary>
        [Column(@"SpatialLocation", Order = 7, TypeName = "geography")]
        [Display(Name = "Spatial location")]
        public System.Data.Entity.Spatial.DbGeography SpatialLocation { get; set; } // SpatialLocation

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 8, TypeName = "uniqueidentifier")]
        [Index(@"AK_Address_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_BusinessEntityAddresses where [BusinessEntityAddress].[AddressID] point to this entity (FK_BusinessEntityAddress_Address_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddressEntity> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress.FK_BusinessEntityAddress_Address_AddressID

        // Foreign keys

        /// <summary>
        /// Parent Person_StateProvince pointed by [Address].([StateProvinceId]) (FK_Address_StateProvince_StateProvinceID)
        /// </summary>
        [ForeignKey("StateProvinceId"), Required] public virtual Person_StateProvinceEntity Person_StateProvince { get; set; } // FK_Address_StateProvince_StateProvinceID

        public Person_AddressEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddressEntity>();
        }
    }

    // AddressType
    ///<summary>
    /// Types of addresses stored in the Address table.
    ///</summary>
    [Table("AddressType", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_AddressTypeEntity
    {

        ///<summary>
        /// Primary key for AddressType records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"AddressTypeID", Order = 1, TypeName = "int")]
        [Index(@"PK_AddressType_AddressTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address type ID")]
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// Address type description. For example, Billing, Home, or Shipping.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_AddressType_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 3, TypeName = "uniqueidentifier")]
        [Index(@"AK_AddressType_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_BusinessEntityAddresses where [BusinessEntityAddress].[AddressTypeID] point to this entity (FK_BusinessEntityAddress_AddressType_AddressTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddressEntity> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress.FK_BusinessEntityAddress_AddressType_AddressTypeID

        public Person_AddressTypeEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddressEntity>();
        }
    }

    // BusinessEntity
    ///<summary>
    /// Source of the ID that connects vendors, customers, and employees with address and contact information.
    ///</summary>
    [Table("BusinessEntity", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_BusinessEntityEntity
    {

        ///<summary>
        /// Primary key for all customers, vendors, and employees.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_BusinessEntity_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 2, TypeName = "uniqueidentifier")]
        [Index(@"AK_BusinessEntity_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Person_BusinessEntityEntity pointed by [Person].[BusinessEntityID] (FK_Person_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual Person_PersonEntity Person_Person { get; set; } // Person.FK_Person_BusinessEntity_BusinessEntityID
        /// <summary>
        /// Child Person_BusinessEntityAddresses where [BusinessEntityAddress].[BusinessEntityID] point to this entity (FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddressEntity> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress.FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
        /// <summary>
        /// Child Person_BusinessEntityContacts where [BusinessEntityContact].[BusinessEntityID] point to this entity (FK_BusinessEntityContact_BusinessEntity_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContactEntity> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact.FK_BusinessEntityContact_BusinessEntity_BusinessEntityID

        public Person_BusinessEntityEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddressEntity>();
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContactEntity>();
        }
    }

    // BusinessEntityAddress
    ///<summary>
    /// Cross-reference table mapping customers, vendors, and employees to their addresses.
    ///</summary>
    [Table("BusinessEntityAddress", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_BusinessEntityAddressEntity
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Address.AddressID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressID", Order = 2, TypeName = "int")]
        [Index(@"IX_BusinessEntityAddress_AddressID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address ID")]
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to AddressType.AddressTypeID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressTypeID", Order = 3, TypeName = "int")]
        [Index(@"IX_BusinessEntityAddress_AddressTypeID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Address type ID")]
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Index(@"AK_BusinessEntityAddress_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Address pointed by [BusinessEntityAddress].([AddressId]) (FK_BusinessEntityAddress_Address_AddressID)
        /// </summary>
        [ForeignKey("AddressId"), Required] public virtual Person_AddressEntity Person_Address { get; set; } // FK_BusinessEntityAddress_Address_AddressID

        /// <summary>
        /// Parent Person_AddressType pointed by [BusinessEntityAddress].([AddressTypeId]) (FK_BusinessEntityAddress_AddressType_AddressTypeID)
        /// </summary>
        [ForeignKey("AddressTypeId"), Required] public virtual Person_AddressTypeEntity Person_AddressType { get; set; } // FK_BusinessEntityAddress_AddressType_AddressTypeID

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [BusinessEntityAddress].([BusinessEntityId]) (FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Person_BusinessEntityEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID

        public Person_BusinessEntityAddressEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // BusinessEntityContact
    ///<summary>
    /// Cross-reference table mapping stores, vendors, and employees to people
    ///</summary>
    [Table("BusinessEntityContact", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_BusinessEntityContactEntity
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Person.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PersonID", Order = 2, TypeName = "int")]
        [Index(@"IX_BusinessEntityContact_PersonID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Person ID")]
        public int PersonId { get; set; } // PersonID (Primary key)

        ///<summary>
        /// Primary key.  Foreign key to ContactType.ContactTypeID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ContactTypeID", Order = 3, TypeName = "int")]
        [Index(@"IX_BusinessEntityContact_ContactTypeID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Contact type ID")]
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Index(@"AK_BusinessEntityContact_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [BusinessEntityContact].([BusinessEntityId]) (FK_BusinessEntityContact_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Person_BusinessEntityEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID

        /// <summary>
        /// Parent Person_ContactType pointed by [BusinessEntityContact].([ContactTypeId]) (FK_BusinessEntityContact_ContactType_ContactTypeID)
        /// </summary>
        [ForeignKey("ContactTypeId"), Required] public virtual Person_ContactTypeEntity Person_ContactType { get; set; } // FK_BusinessEntityContact_ContactType_ContactTypeID

        /// <summary>
        /// Parent Person_Person pointed by [BusinessEntityContact].([PersonId]) (FK_BusinessEntityContact_Person_PersonID)
        /// </summary>
        [ForeignKey("PersonId"), Required] public virtual Person_PersonEntity Person_Person { get; set; } // FK_BusinessEntityContact_Person_PersonID

        public Person_BusinessEntityContactEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ContactType
    ///<summary>
    /// Lookup table containing the types of business entity contacts.
    ///</summary>
    [Table("ContactType", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_ContactTypeEntity
    {

        ///<summary>
        /// Primary key for ContactType records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ContactTypeID", Order = 1, TypeName = "int")]
        [Index(@"PK_ContactType_ContactTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Contact type ID")]
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// Contact type description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_ContactType_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_BusinessEntityContacts where [BusinessEntityContact].[ContactTypeID] point to this entity (FK_BusinessEntityContact_ContactType_ContactTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContactEntity> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact.FK_BusinessEntityContact_ContactType_ContactTypeID

        public Person_ContactTypeEntity()
        {
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContactEntity>();
        }
    }

    // CountryRegion
    ///<summary>
    /// Lookup table containing the ISO standard codes for countries and regions.
    ///</summary>
    [Table("CountryRegion", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_CountryRegionEntity
    {

        ///<summary>
        /// ISO standard code for countries and regions.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionCode", Order = 1, TypeName = "nvarchar")]
        [Index(@"PK_CountryRegion_CountryRegionCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// Country or region name.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_CountryRegion_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_StateProvinces where [StateProvince].[CountryRegionCode] point to this entity (FK_StateProvince_CountryRegion_CountryRegionCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_StateProvinceEntity> Person_StateProvinces { get; set; } // StateProvince.FK_StateProvince_CountryRegion_CountryRegionCode

        public Person_CountryRegionEntity()
        {
            ModifiedDate = System.DateTime.Now;
            Person_StateProvinces = new System.Collections.Generic.List<Person_StateProvinceEntity>();
        }
    }

    // EmailAddress
    ///<summary>
    /// Where to send a person email.
    ///</summary>
    [Table("EmailAddress", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_EmailAddressEntity
    {

        ///<summary>
        /// Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_EmailAddress_BusinessEntityID_EmailAddressID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. ID of this email address.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"EmailAddressID", Order = 2, TypeName = "int")]
        [Index(@"PK_EmailAddress_BusinessEntityID_EmailAddressID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Email address ID")]
        public int EmailAddressId { get; set; } // EmailAddressID (Primary key)

        ///<summary>
        /// E-mail address for the person.
        ///</summary>
        [Column(@"EmailAddress", Order = 3, TypeName = "nvarchar")]
        [Index(@"IX_EmailAddress_EmailAddress", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [EmailAddress].([BusinessEntityId]) (FK_EmailAddress_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Person_PersonEntity Person_Person { get; set; } // FK_EmailAddress_Person_BusinessEntityID

        public Person_EmailAddressEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Password
    ///<summary>
    /// One way hashed authentication information
    ///</summary>
    [Table("Password", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PasswordEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Password_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("Person_Person")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Password for the e-mail account.
        ///</summary>
        [Column(@"PasswordHash", Order = 2, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Password hash")]
        public string PasswordHash { get; set; } // PasswordHash (length: 128)

        ///<summary>
        /// Random value concatenated with the password string before the password is hashed.
        ///</summary>
        [Column(@"PasswordSalt", Order = 3, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Password salt")]
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [Password].([BusinessEntityId]) (FK_Password_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Person_PersonEntity Person_Person { get; set; } // FK_Password_Person_BusinessEntityID

        public Person_PasswordEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Person
    ///<summary>
    /// Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.
    ///</summary>
    [Table("Person", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PersonEntity
    {

        ///<summary>
        /// Primary key for Person records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Person_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        [ForeignKey("Person_BusinessEntity")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact
        ///</summary>
        [Column(@"PersonType", Order = 2, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Person type")]
        public string PersonType { get; set; } // PersonType (length: 2)

        ///<summary>
        /// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        ///</summary>
        [Column(@"NameStyle", Order = 3, TypeName = "bit")]
        [Required]
        [Display(Name = "Name style")]
        public bool NameStyle { get; set; } // NameStyle

        ///<summary>
        /// A courtesy title. For example, Mr. or Ms.
        ///</summary>
        [Column(@"Title", Order = 4, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        ///<summary>
        /// First name of the person.
        ///</summary>
        [Column(@"FirstName", Order = 5, TypeName = "nvarchar")]
        [Index(@"IX_Person_LastName_FirstName_MiddleName", 2, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 50)

        ///<summary>
        /// Middle name or middle initial of the person.
        ///</summary>
        [Column(@"MiddleName", Order = 6, TypeName = "nvarchar")]
        [Index(@"IX_Person_LastName_FirstName_MiddleName", 3, IsUnique = false, IsClustered = false)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        ///<summary>
        /// Last name of the person.
        ///</summary>
        [Column(@"LastName", Order = 7, TypeName = "nvarchar")]
        [Index(@"IX_Person_LastName_FirstName_MiddleName", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 50)

        ///<summary>
        /// Surname suffix. For example, Sr. or Jr.
        ///</summary>
        [Column(@"Suffix", Order = 8, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        ///<summary>
        /// 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.
        ///</summary>
        [Column(@"EmailPromotion", Order = 9, TypeName = "int")]
        [Required]
        [Display(Name = "Email promotion")]
        public int EmailPromotion { get; set; } // EmailPromotion

        ///<summary>
        /// Additional contact information about the person stored in xml format.
        ///</summary>
        [Column(@"AdditionalContactInfo", Order = 10, TypeName = "xml")]
        [Display(Name = "Additional contact info")]
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo

        ///<summary>
        /// Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.
        ///</summary>
        [Column(@"Demographics", Order = 11, TypeName = "xml")]
        [Display(Name = "Demographics")]
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 12, TypeName = "uniqueidentifier")]
        [Index(@"AK_Person_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 13, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Person_PersonEntity pointed by [Password].[BusinessEntityID] (FK_Password_Person_BusinessEntityID)
        /// </summary>
        public virtual Person_PasswordEntity Person_Password { get; set; } // Password.FK_Password_Person_BusinessEntityID
        /// <summary>
        /// Child Person_BusinessEntityContacts where [BusinessEntityContact].[PersonID] point to this entity (FK_BusinessEntityContact_Person_PersonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContactEntity> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact.FK_BusinessEntityContact_Person_PersonID
        /// <summary>
        /// Child Person_EmailAddresses where [EmailAddress].[BusinessEntityID] point to this entity (FK_EmailAddress_Person_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_EmailAddressEntity> Person_EmailAddresses { get; set; } // EmailAddress.FK_EmailAddress_Person_BusinessEntityID
        /// <summary>
        /// Child Person_PersonPhones where [PersonPhone].[BusinessEntityID] point to this entity (FK_PersonPhone_Person_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_PersonPhoneEntity> Person_PersonPhones { get; set; } // PersonPhone.FK_PersonPhone_Person_BusinessEntityID

        // Foreign keys

        /// <summary>
        /// Parent Person_BusinessEntity pointed by [Person].([BusinessEntityId]) (FK_Person_BusinessEntity_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Person_BusinessEntityEntity Person_BusinessEntity { get; set; } // FK_Person_BusinessEntity_BusinessEntityID

        public Person_PersonEntity()
        {
            NameStyle = false;
            EmailPromotion = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContactEntity>();
            Person_EmailAddresses = new System.Collections.Generic.List<Person_EmailAddressEntity>();
            Person_PersonPhones = new System.Collections.Generic.List<Person_PersonPhoneEntity>();
        }
    }

    // PersonPhone
    ///<summary>
    /// Telephone number and type of a person.
    ///</summary>
    [Table("PersonPhone", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PersonPhoneEntity
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Telephone number identification number.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PhoneNumber", Order = 2, TypeName = "nvarchar")]
        [Index(@"IX_PersonPhone_PhoneNumber", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Key]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PhoneNumber (Primary key) (length: 25)

        ///<summary>
        /// Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PhoneNumberTypeID", Order = 3, TypeName = "int")]
        [Index(@"PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Phone number type ID")]
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [PersonPhone].([BusinessEntityId]) (FK_PersonPhone_Person_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Person_PersonEntity Person_Person { get; set; } // FK_PersonPhone_Person_BusinessEntityID

        /// <summary>
        /// Parent Person_PhoneNumberType pointed by [PersonPhone].([PhoneNumberTypeId]) (FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID)
        /// </summary>
        [ForeignKey("PhoneNumberTypeId"), Required] public virtual Person_PhoneNumberTypeEntity Person_PhoneNumberType { get; set; } // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID

        public Person_PersonPhoneEntity()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PhoneNumberType
    ///<summary>
    /// Type of phone number of a person.
    ///</summary>
    [Table("PhoneNumberType", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PhoneNumberTypeEntity
    {

        ///<summary>
        /// Primary key for telephone number type records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"PhoneNumberTypeID", Order = 1, TypeName = "int")]
        [Index(@"PK_PhoneNumberType_PhoneNumberTypeID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Phone number type ID")]
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Name of the telephone number type
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_PersonPhones where [PersonPhone].[PhoneNumberTypeID] point to this entity (FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_PersonPhoneEntity> Person_PersonPhones { get; set; } // PersonPhone.FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID

        public Person_PhoneNumberTypeEntity()
        {
            ModifiedDate = System.DateTime.Now;
            Person_PersonPhones = new System.Collections.Generic.List<Person_PersonPhoneEntity>();
        }
    }

    // StateProvince
    ///<summary>
    /// State and province lookup table.
    ///</summary>
    [Table("StateProvince", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_StateProvinceEntity
    {

        ///<summary>
        /// Primary key for StateProvince records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"StateProvinceID", Order = 1, TypeName = "int")]
        [Index(@"PK_StateProvince_StateProvinceID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "State province ID")]
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key)

        ///<summary>
        /// ISO standard state or province code.
        ///</summary>
        [Column(@"StateProvinceCode", Order = 2, TypeName = "nchar")]
        [Index(@"AK_StateProvince_StateProvinceCode_CountryRegionCode", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "State province code")]
        public string StateProvinceCode { get; set; } // StateProvinceCode (length: 3)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        [Column(@"CountryRegionCode", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_StateProvince_StateProvinceCode_CountryRegionCode", 2, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        ///</summary>
        [Column(@"IsOnlyStateProvinceFlag", Order = 4, TypeName = "bit")]
        [Required]
        [Display(Name = "Is only state province flag")]
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag

        ///<summary>
        /// State or province description.
        ///</summary>
        [Column(@"Name", Order = 5, TypeName = "nvarchar")]
        [Index(@"AK_StateProvince_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Territory ID")]
        public int TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 7, TypeName = "uniqueidentifier")]
        [Index(@"AK_StateProvince_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 8, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Person_Addresses where [Address].[StateProvinceID] point to this entity (FK_Address_StateProvince_StateProvinceID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Person_AddressEntity> Person_Addresses { get; set; } // Address.FK_Address_StateProvince_StateProvinceID

        // Foreign keys

        /// <summary>
        /// Parent Person_CountryRegion pointed by [StateProvince].([CountryRegionCode]) (FK_StateProvince_CountryRegion_CountryRegionCode)
        /// </summary>
        [ForeignKey("CountryRegionCode"), Required] public virtual Person_CountryRegionEntity Person_CountryRegion { get; set; } // FK_StateProvince_CountryRegion_CountryRegionCode

        public Person_StateProvinceEntity()
        {
            IsOnlyStateProvinceFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_Addresses = new System.Collections.Generic.List<Person_AddressEntity>();
        }
    }

    // vAdditionalContactInfo
    [Table("vAdditionalContactInfo", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_VAdditionalContactInfoEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 3, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"TelephoneNumber", Order = 5, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Phone]
        [Display(Name = "Telephone number")]
        public string TelephoneNumber { get; set; } // TelephoneNumber (length: 50)

        [Column(@"TelephoneSpecialInstructions", Order = 6, TypeName = "nvarchar(max)")]
        [Display(Name = "Telephone special instructions")]
        public string TelephoneSpecialInstructions { get; set; } // TelephoneSpecialInstructions

        [Column(@"Street", Order = 7, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Street")]
        public string Street { get; set; } // Street (length: 50)

        [Column(@"City", Order = 8, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "City")]
        public string City { get; set; } // City (length: 50)

        [Column(@"StateProvince", Order = 9, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "State province")]
        public string StateProvince { get; set; } // StateProvince (length: 50)

        [Column(@"PostalCode", Order = 10, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (length: 50)

        [Column(@"CountryRegion", Order = 11, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Country region")]
        public string CountryRegion { get; set; } // CountryRegion (length: 50)

        [Column(@"HomeAddressSpecialInstructions", Order = 12, TypeName = "nvarchar(max)")]
        [Display(Name = "Home address special instructions")]
        public string HomeAddressSpecialInstructions { get; set; } // HomeAddressSpecialInstructions

        [Column(@"EMailAddress", Order = 13, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [EmailAddress]
        [Display(Name = "Em ail address")]
        public string EMailAddress { get; set; } // EMailAddress (length: 128)

        [Column(@"EMailSpecialInstructions", Order = 14, TypeName = "nvarchar(max)")]
        [Display(Name = "Em ail special instructions")]
        public string EMailSpecialInstructions { get; set; } // EMailSpecialInstructions

        [Column(@"EMailTelephoneNumber", Order = 15, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Em ail telephone number")]
        public string EMailTelephoneNumber { get; set; } // EMailTelephoneNumber (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"rowguid", Order = 16, TypeName = "uniqueidentifier")]
        [Required]
        [Key]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ModifiedDate", Order = 17, TypeName = "datetime")]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate (Primary key)
    }

    // vStateProvinceCountryRegion
    [Table("vStateProvinceCountryRegion", Schema = "Person")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_VStateProvinceCountryRegionEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "State province ID")]
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceCode", Order = 2, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "State province code")]
        public string StateProvinceCode { get; set; } // StateProvinceCode (Primary key) (length: 3)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"IsOnlyStateProvinceFlag", Order = 3, TypeName = "bit")]
        [Required]
        [Key]
        [Display(Name = "Is only state province flag")]
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceName", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "State province name")]
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"TerritoryID", Order = 5, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Territory ID")]
        public int TerritoryId { get; set; } // TerritoryID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionCode", Order = 6, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionName", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Country region name")]
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)
    }

    #endregion

    #region POCO Configuration

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_AddressEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_AddressEntity>
    {
        public Person_AddressEntityMapping()
            : this("Person")
        {
        }

        public Person_AddressEntityMapping(string schema)
        {
            Property(x => x.AddressLine2).IsOptional();
            Property(x => x.SpatialLocation).IsOptional();

        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_AddressTypeEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_AddressTypeEntity>
    {
        public Person_AddressTypeEntityMapping()
            : this("Person")
        {
        }

        public Person_AddressTypeEntityMapping(string schema)
        {
        }
    }

    // BusinessEntity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_BusinessEntityEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntityEntity>
    {
        public Person_BusinessEntityEntityMapping()
            : this("Person")
        {
        }

        public Person_BusinessEntityEntityMapping(string schema)
        {
        }
    }

    // BusinessEntityAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_BusinessEntityAddressEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntityAddressEntity>
    {
        public Person_BusinessEntityAddressEntityMapping()
            : this("Person")
        {
        }

        public Person_BusinessEntityAddressEntityMapping(string schema)
        {

        }
    }

    // BusinessEntityContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_BusinessEntityContactEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntityContactEntity>
    {
        public Person_BusinessEntityContactEntityMapping()
            : this("Person")
        {
        }

        public Person_BusinessEntityContactEntityMapping(string schema)
        {

        }
    }

    // ContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_ContactTypeEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_ContactTypeEntity>
    {
        public Person_ContactTypeEntityMapping()
            : this("Person")
        {
        }

        public Person_ContactTypeEntityMapping(string schema)
        {
        }
    }

    // CountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_CountryRegionEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_CountryRegionEntity>
    {
        public Person_CountryRegionEntityMapping()
            : this("Person")
        {
        }

        public Person_CountryRegionEntityMapping(string schema)
        {
        }
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_EmailAddressEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_EmailAddressEntity>
    {
        public Person_EmailAddressEntityMapping()
            : this("Person")
        {
        }

        public Person_EmailAddressEntityMapping(string schema)
        {
            Property(x => x.EmailAddress).IsOptional();

        }
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PasswordEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PasswordEntity>
    {
        public Person_PasswordEntityMapping()
            : this("Person")
        {
        }

        public Person_PasswordEntityMapping(string schema)
        {
            Property(x => x.PasswordHash).IsUnicode(false);
            Property(x => x.PasswordSalt).IsUnicode(false);

        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PersonEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PersonEntity>
    {
        public Person_PersonEntityMapping()
            : this("Person")
        {
        }

        public Person_PersonEntityMapping(string schema)
        {
            Property(x => x.PersonType).IsFixedLength();
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.AdditionalContactInfo).IsOptional();
            Property(x => x.Demographics).IsOptional();

        }
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PersonPhoneEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PersonPhoneEntity>
    {
        public Person_PersonPhoneEntityMapping()
            : this("Person")
        {
        }

        public Person_PersonPhoneEntityMapping(string schema)
        {

        }
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_PhoneNumberTypeEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PhoneNumberTypeEntity>
    {
        public Person_PhoneNumberTypeEntityMapping()
            : this("Person")
        {
        }

        public Person_PhoneNumberTypeEntityMapping(string schema)
        {
        }
    }

    // StateProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_StateProvinceEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_StateProvinceEntity>
    {
        public Person_StateProvinceEntityMapping()
            : this("Person")
        {
        }

        public Person_StateProvinceEntityMapping(string schema)
        {
            Property(x => x.StateProvinceCode).IsFixedLength();

        }
    }

    // vAdditionalContactInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_VAdditionalContactInfoEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_VAdditionalContactInfoEntity>
    {
        public Person_VAdditionalContactInfoEntityMapping()
            : this("Person")
        {
        }

        public Person_VAdditionalContactInfoEntityMapping(string schema)
        {
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.TelephoneNumber).IsOptional();
            Property(x => x.TelephoneSpecialInstructions).IsOptional();
            Property(x => x.Street).IsOptional();
            Property(x => x.City).IsOptional();
            Property(x => x.StateProvince).IsOptional();
            Property(x => x.PostalCode).IsOptional();
            Property(x => x.CountryRegion).IsOptional();
            Property(x => x.HomeAddressSpecialInstructions).IsOptional();
            Property(x => x.EMailAddress).IsOptional();
            Property(x => x.EMailSpecialInstructions).IsOptional();
            Property(x => x.EMailTelephoneNumber).IsOptional();
        }
    }

    // vStateProvinceCountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Person_VStateProvinceCountryRegionEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_VStateProvinceCountryRegionEntity>
    {
        public Person_VStateProvinceCountryRegionEntityMapping()
            : this("Person")
        {
        }

        public Person_VStateProvinceCountryRegionEntityMapping(string schema)
        {
            Property(x => x.StateProvinceCode).IsFixedLength();
        }
    }

    #endregion

}
// </auto-generated>

