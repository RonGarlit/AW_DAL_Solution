

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AW_SharedViewsSProcsDAL\App.config"
//     Connection String Name: "AW2016_SharedDB"
//     Connection String:      "Data Source=DESKTOP-PDAFJ6Q;Initial Catalog=AdventureWorks2016;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 13.0.5026.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AW_SharedViewsSProcsDAL
{
    using System.Linq;

    #region Unit of work

    public partial interface ISharedDBContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AwBuildVersionEntity> AwBuildVersions { get; set; } // AWBuildVersion
        System.Data.Entity.DbSet<DatabaseLogEntity> DatabaseLogs { get; set; } // DatabaseLog
        System.Data.Entity.DbSet<EmployeeOneEntity> EmployeeOnes { get; set; } // EmployeeOne
        System.Data.Entity.DbSet<EmployeeThreeEntity> EmployeeThrees { get; set; } // EmployeeThree
        System.Data.Entity.DbSet<EmployeeTwoEntity> EmployeeTwoes { get; set; } // EmployeeTwo
        System.Data.Entity.DbSet<ErrorLogEntity> ErrorLogs { get; set; } // ErrorLog
        System.Data.Entity.DbSet<GloveEntity> Gloves { get; set; } // Gloves
        System.Data.Entity.DbSet<NewProductEntity> NewProducts { get; set; } // NewProducts
        System.Data.Entity.DbSet<ProductResultEntity> ProductResults { get; set; } // ProductResults

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate);
        System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate);

        System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId);
        System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId);

        System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId);
        System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId);

        System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate);
        System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate);

        int UspLogError(out int? errorLogId);
        // UspLogErrorAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UspPrintError();
        // UspPrintErrorAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language);
        // UspSearchCandidateResumesAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class SharedDBContext : System.Data.Entity.DbContext, ISharedDBContext
    {
        public System.Data.Entity.DbSet<AwBuildVersionEntity> AwBuildVersions { get; set; } // AWBuildVersion
        public System.Data.Entity.DbSet<DatabaseLogEntity> DatabaseLogs { get; set; } // DatabaseLog
        public System.Data.Entity.DbSet<EmployeeOneEntity> EmployeeOnes { get; set; } // EmployeeOne
        public System.Data.Entity.DbSet<EmployeeThreeEntity> EmployeeThrees { get; set; } // EmployeeThree
        public System.Data.Entity.DbSet<EmployeeTwoEntity> EmployeeTwoes { get; set; } // EmployeeTwo
        public System.Data.Entity.DbSet<ErrorLogEntity> ErrorLogs { get; set; } // ErrorLog
        public System.Data.Entity.DbSet<GloveEntity> Gloves { get; set; } // Gloves
        public System.Data.Entity.DbSet<NewProductEntity> NewProducts { get; set; } // NewProducts
        public System.Data.Entity.DbSet<ProductResultEntity> ProductResults { get; set; } // ProductResults

        static SharedDBContext()
        {
            System.Data.Entity.Database.SetInitializer<SharedDBContext>(null);
        }

        public SharedDBContext()
            : base("Name=AW2016_SharedDB")
        {
            InitializePartial();
        }

        public SharedDBContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public SharedDBContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public SharedDBContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public SharedDBContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AwBuildVersionEntityMapping());
            modelBuilder.Configurations.Add(new DatabaseLogEntityMapping());
            modelBuilder.Configurations.Add(new EmployeeOneEntityMapping());
            modelBuilder.Configurations.Add(new EmployeeThreeEntityMapping());
            modelBuilder.Configurations.Add(new EmployeeTwoEntityMapping());
            modelBuilder.Configurations.Add(new ErrorLogEntityMapping());
            modelBuilder.Configurations.Add(new GloveEntityMapping());
            modelBuilder.Configurations.Add(new NewProductEntityMapping());
            modelBuilder.Configurations.Add(new ProductResultEntityMapping());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AwBuildVersionEntityMapping(schema));
            modelBuilder.Configurations.Add(new DatabaseLogEntityMapping(schema));
            modelBuilder.Configurations.Add(new EmployeeOneEntityMapping(schema));
            modelBuilder.Configurations.Add(new EmployeeThreeEntityMapping(schema));
            modelBuilder.Configurations.Add(new EmployeeTwoEntityMapping(schema));
            modelBuilder.Configurations.Add(new ErrorLogEntityMapping(schema));
            modelBuilder.Configurations.Add(new GloveEntityMapping(schema));
            modelBuilder.Configurations.Add(new NewProductEntityMapping(schema));
            modelBuilder.Configurations.Add(new ProductResultEntityMapping(schema));
            OnCreateModelPartial(modelBuilder, schema);
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
		static partial void OnCreateModelPartial(System.Data.Entity.DbModelBuilder modelBuilder, string schema);        

        // Stored Procedures
        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC @procResult = [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId)
        {
            int procResult;
            return UspGetEmployeeManagers(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC @procResult = [dbo].[uspGetEmployeeManagers] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC [dbo].[uspGetEmployeeManagers] @BusinessEntityID", businessEntityIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId)
        {
            int procResult;
            return UspGetManagerEmployees(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC @procResult = [dbo].[uspGetManagerEmployees] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC [dbo].[uspGetManagerEmployees] @BusinessEntityID", businessEntityIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC @procResult = [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam).ToListAsync();

            return procResultData;
        }

        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int UspPrintError()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);

            return (int) procResultParam.Value;
        }

        public int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language)
        {
            var searchStringParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@searchString", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = searchString, Size = 1000 };
            if (searchStringParam.Value == null)
                searchStringParam.Value = System.DBNull.Value;

            var useInflectionalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@useInflectional", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = useInflectional.GetValueOrDefault() };
            if (!useInflectional.HasValue)
                useInflectionalParam.Value = System.DBNull.Value;

            var useThesaurusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@useThesaurus", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = useThesaurus.GetValueOrDefault() };
            if (!useThesaurus.HasValue)
                useThesaurusParam.Value = System.DBNull.Value;

            var languageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@language", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = language.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!language.HasValue)
                languageParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspSearchCandidateResumes] @searchString, @useInflectional, @useThesaurus, @language", searchStringParam, useInflectionalParam, useThesaurusParam, languageParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Database context factory

    public partial class SharedDBContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<SharedDBContext>
    {
        public SharedDBContext Create()
        {
            return new SharedDBContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeSharedDBContext : ISharedDBContext
    {
        public System.Data.Entity.DbSet<AwBuildVersionEntity> AwBuildVersions { get; set; }
        public System.Data.Entity.DbSet<DatabaseLogEntity> DatabaseLogs { get; set; }
        public System.Data.Entity.DbSet<EmployeeOneEntity> EmployeeOnes { get; set; }
        public System.Data.Entity.DbSet<EmployeeThreeEntity> EmployeeThrees { get; set; }
        public System.Data.Entity.DbSet<EmployeeTwoEntity> EmployeeTwoes { get; set; }
        public System.Data.Entity.DbSet<ErrorLogEntity> ErrorLogs { get; set; }
        public System.Data.Entity.DbSet<GloveEntity> Gloves { get; set; }
        public System.Data.Entity.DbSet<NewProductEntity> NewProducts { get; set; }
        public System.Data.Entity.DbSet<ProductResultEntity> ProductResults { get; set; }

        public FakeSharedDBContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AwBuildVersions = new FakeDbSet<AwBuildVersionEntity>("SystemInformationId");
            DatabaseLogs = new FakeDbSet<DatabaseLogEntity>("DatabaseLogId");
            EmployeeOnes = new FakeDbSet<EmployeeOneEntity>("LastName", "FirstName", "JobTitle");
            EmployeeThrees = new FakeDbSet<EmployeeThreeEntity>("LastName", "FirstName", "JobTitle");
            EmployeeTwoes = new FakeDbSet<EmployeeTwoEntity>("LastName", "FirstName", "JobTitle");
            ErrorLogs = new FakeDbSet<ErrorLogEntity>("ErrorLogId");
            Gloves = new FakeDbSet<GloveEntity>("ProductModelId", "Name");
            NewProducts = new FakeDbSet<NewProductEntity>("ProductId", "Name", "ProductNumber", "MakeFlag", "FinishedGoodsFlag", "SafetyStockLevel", "ReorderPoint", "StandardCost", "ListPrice", "DaysToManufacture", "SellStartDate", "Rowguid", "ModifiedDate");
            ProductResults = new FakeDbSet<ProductResultEntity>("ProductModelId", "Name");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetBillOfMaterials(startProductId, checkDate, out procResult));
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId)
        {
            int procResult;
            return UspGetEmployeeManagers(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetEmployeeManagers(businessEntityId, out procResult));
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId)
        {
            int procResult;
            return UspGetManagerEmployees(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetManagerEmployees(businessEntityId, out procResult));
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetWhereUsedProductId(startProductId, checkDate, out procResult));
        }

        public int UspLogError(out int? errorLogId)
        {
            errorLogId = default(int);

            return 0;
        }

        public int UspPrintError()
        {

            return 0;
        }

        public int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language)
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AWBuildVersion
    ///<summary>
    /// Current version number of the AdventureWorks 2016 sample database.
    ///</summary>
    [Table("AWBuildVersion", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class AwBuildVersionEntity
    {

        ///<summary>
        /// Primary key for AWBuildVersion records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SystemInformationID", Order = 1, TypeName = "tinyint")]
        [Index(@"PK_AWBuildVersion_SystemInformationID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "System information ID")]
        public byte SystemInformationId { get; set; } // SystemInformationID (Primary key)

        ///<summary>
        /// Version number of the database in 9.yy.mm.dd.00 format.
        ///</summary>
        [Column(@"Database Version", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Database version")]
        public string DatabaseVersion { get; set; } // Database Version (length: 25)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"VersionDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Version date")]
        public System.DateTime VersionDate { get; set; } // VersionDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public AwBuildVersionEntity()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // DatabaseLog
    ///<summary>
    /// Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger ddlDatabaseTriggerLog.
    ///</summary>
    [Table("DatabaseLog", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class DatabaseLogEntity
    {

        ///<summary>
        /// Primary key for DatabaseLog records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"DatabaseLogID", Order = 1, TypeName = "int")]
        [Index(@"PK_DatabaseLog_DatabaseLogID", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Database log ID")]
        public int DatabaseLogId { get; set; } // DatabaseLogID (Primary key)

        ///<summary>
        /// The date and time the DDL change occurred.
        ///</summary>
        [Column(@"PostTime", Order = 2, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Post time")]
        public System.DateTime PostTime { get; set; } // PostTime

        ///<summary>
        /// The user who implemented the DDL change.
        ///</summary>
        [Column(@"DatabaseUser", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Database user")]
        public string DatabaseUser { get; set; } // DatabaseUser (length: 128)

        ///<summary>
        /// The type of DDL statement that was executed.
        ///</summary>
        [Column(@"Event", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Event")]
        public string Event { get; set; } // Event (length: 128)

        ///<summary>
        /// The schema to which the changed object belongs.
        ///</summary>
        [Column(@"Schema", Order = 5, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Schema")]
        public string Schema { get; set; } // Schema (length: 128)

        ///<summary>
        /// The object that was changed by the DDL statment.
        ///</summary>
        [Column(@"Object", Order = 6, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Object")]
        public string Object { get; set; } // Object (length: 128)

        ///<summary>
        /// The exact Transact-SQL statement that was executed.
        ///</summary>
        [Column(@"TSQL", Order = 7, TypeName = "nvarchar(max)")]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Tsql")]
        public string Tsql { get; set; } // TSQL

        ///<summary>
        /// The raw XML data generated by database trigger.
        ///</summary>
        [Column(@"XmlEvent", Order = 8, TypeName = "xml")]
        [Required(AllowEmptyStrings = true)]
        [Display(Name = "Xml event")]
        public string XmlEvent { get; set; } // XmlEvent

        public DatabaseLogEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EmployeeOne
    [Table("EmployeeOne", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class EmployeeOneEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 1, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JobTitle", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)

        public EmployeeOneEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EmployeeThree
    [Table("EmployeeThree", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class EmployeeThreeEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 1, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JobTitle", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)

        public EmployeeThreeEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // EmployeeTwo
    [Table("EmployeeTwo", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class EmployeeTwoEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 1, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JobTitle", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)

        public EmployeeTwoEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ErrorLog
    ///<summary>
    /// Audit table tracking errors in the the AdventureWorks database that are caught by the CATCH block of a TRY...CATCH construct. Data is inserted by stored procedure dbo.uspLogError when it is executed from inside the CATCH block of a TRY...CATCH construct.
    ///</summary>
    [Table("ErrorLog", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class ErrorLogEntity
    {

        ///<summary>
        /// Primary key for ErrorLog records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ErrorLogID", Order = 1, TypeName = "int")]
        [Index(@"PK_ErrorLog_ErrorLogID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Error log ID")]
        public int ErrorLogId { get; set; } // ErrorLogID (Primary key)

        ///<summary>
        /// The date and time at which the error occurred.
        ///</summary>
        [Column(@"ErrorTime", Order = 2, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Error time")]
        public System.DateTime ErrorTime { get; set; } // ErrorTime

        ///<summary>
        /// The user who executed the batch in which the error occurred.
        ///</summary>
        [Column(@"UserName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [DataType(DataType.Text)]
        [Display(Name = "User name")]
        public string UserName { get; set; } // UserName (length: 128)

        ///<summary>
        /// The error number of the error that occurred.
        ///</summary>
        [Column(@"ErrorNumber", Order = 4, TypeName = "int")]
        [Required]
        [Display(Name = "Error number")]
        public int ErrorNumber { get; set; } // ErrorNumber

        ///<summary>
        /// The severity of the error that occurred.
        ///</summary>
        [Column(@"ErrorSeverity", Order = 5, TypeName = "int")]
        [Display(Name = "Error severity")]
        public int? ErrorSeverity { get; set; } // ErrorSeverity

        ///<summary>
        /// The state number of the error that occurred.
        ///</summary>
        [Column(@"ErrorState", Order = 6, TypeName = "int")]
        [Display(Name = "Error state")]
        public int? ErrorState { get; set; } // ErrorState

        ///<summary>
        /// The name of the stored procedure or trigger where the error occurred.
        ///</summary>
        [Column(@"ErrorProcedure", Order = 7, TypeName = "nvarchar")]
        [MaxLength(126)]
        [StringLength(126)]
        [Display(Name = "Error procedure")]
        public string ErrorProcedure { get; set; } // ErrorProcedure (length: 126)

        ///<summary>
        /// The line number at which the error occurred.
        ///</summary>
        [Column(@"ErrorLine", Order = 8, TypeName = "int")]
        [Display(Name = "Error line")]
        public int? ErrorLine { get; set; } // ErrorLine

        ///<summary>
        /// The message text of the error that occurred.
        ///</summary>
        [Column(@"ErrorMessage", Order = 9, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(4000)]
        [StringLength(4000)]
        [Display(Name = "Error message")]
        public string ErrorMessage { get; set; } // ErrorMessage (length: 4000)

        public ErrorLogEntity()
        {
            ErrorTime = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Gloves
    [Table("Gloves", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class GloveEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductModelID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Product model ID")]
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        public GloveEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // NewProducts
    [Table("NewProducts", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class NewProductEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductId { get; set; } // ProductID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductNumber", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Key]
        [Display(Name = "Product number")]
        public string ProductNumber { get; set; } // ProductNumber (Primary key) (length: 25)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"MakeFlag", Order = 4, TypeName = "bit")]
        [Required]
        [Key]
        [Display(Name = "Make flag")]
        public bool MakeFlag { get; set; } // MakeFlag (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FinishedGoodsFlag", Order = 5, TypeName = "bit")]
        [Required]
        [Key]
        [Display(Name = "Finished goods flag")]
        public bool FinishedGoodsFlag { get; set; } // FinishedGoodsFlag (Primary key)

        [Column(@"Color", Order = 6, TypeName = "nvarchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Color")]
        public string Color { get; set; } // Color (length: 15)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SafetyStockLevel", Order = 7, TypeName = "smallint")]
        [Required]
        [Key]
        [Display(Name = "Safety stock level")]
        public short SafetyStockLevel { get; set; } // SafetyStockLevel (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ReorderPoint", Order = 8, TypeName = "smallint")]
        [Required]
        [Key]
        [Display(Name = "Reorder point")]
        public short ReorderPoint { get; set; } // ReorderPoint (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StandardCost", Order = 9, TypeName = "money")]
        [Required]
        [Key]
        [DataType(DataType.Currency)]
        [Display(Name = "Standard cost")]
        public decimal StandardCost { get; set; } // StandardCost (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ListPrice", Order = 10, TypeName = "money")]
        [Required]
        [Key]
        [DataType(DataType.Currency)]
        [Display(Name = "List price")]
        public decimal ListPrice { get; set; } // ListPrice (Primary key)

        [Column(@"Size", Order = 11, TypeName = "nvarchar")]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Size")]
        public string Size { get; set; } // Size (length: 5)

        [Column(@"SizeUnitMeasureCode", Order = 12, TypeName = "nchar")]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Size unit measure code")]
        public string SizeUnitMeasureCode { get; set; } // SizeUnitMeasureCode (length: 3)

        [Column(@"WeightUnitMeasureCode", Order = 13, TypeName = "nchar")]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Weight unit measure code")]
        public string WeightUnitMeasureCode { get; set; } // WeightUnitMeasureCode (length: 3)

        [Column(@"Weight", Order = 14, TypeName = "decimal")]
        [Display(Name = "Weight")]
        public decimal? Weight { get; set; } // Weight

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DaysToManufacture", Order = 15, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Days to manufacture")]
        public int DaysToManufacture { get; set; } // DaysToManufacture (Primary key)

        [Column(@"ProductLine", Order = 16, TypeName = "nchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Product line")]
        public string ProductLine { get; set; } // ProductLine (length: 2)

        [Column(@"Class", Order = 17, TypeName = "nchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Class")]
        public string Class { get; set; } // Class (length: 2)

        [Column(@"Style", Order = 18, TypeName = "nchar")]
        [MaxLength(2)]
        [StringLength(2)]
        [Display(Name = "Style")]
        public string Style { get; set; } // Style (length: 2)

        [Column(@"ProductSubcategoryID", Order = 19, TypeName = "int")]
        [Display(Name = "Product subcategory ID")]
        public int? ProductSubcategoryId { get; set; } // ProductSubcategoryID

        [Column(@"ProductModelID", Order = 20, TypeName = "int")]
        [Display(Name = "Product model ID")]
        public int? ProductModelId { get; set; } // ProductModelID

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SellStartDate", Order = 21, TypeName = "datetime")]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Sell start date")]
        public System.DateTime SellStartDate { get; set; } // SellStartDate (Primary key)

        [Column(@"SellEndDate", Order = 22, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Sell end date")]
        public System.DateTime? SellEndDate { get; set; } // SellEndDate

        [Column(@"DiscontinuedDate", Order = 23, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Discontinued date")]
        public System.DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"rowguid", Order = 24, TypeName = "uniqueidentifier")]
        [Required]
        [Key]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ModifiedDate", Order = 25, TypeName = "datetime")]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate (Primary key)

        public NewProductEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ProductResults
    [Table("ProductResults", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class ProductResultEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductModelID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Product model ID")]
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        public ProductResultEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // AWBuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class AwBuildVersionEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AwBuildVersionEntity>
    {
        public AwBuildVersionEntityMapping()
            : this("dbo")
        {
        }

        public AwBuildVersionEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // DatabaseLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class DatabaseLogEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DatabaseLogEntity>
    {
        public DatabaseLogEntityMapping()
            : this("dbo")
        {
        }

        public DatabaseLogEntityMapping(string schema)
        {
            Property(x => x.Schema).IsOptional();
            Property(x => x.Object).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EmployeeOne
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class EmployeeOneEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmployeeOneEntity>
    {
        public EmployeeOneEntityMapping()
            : this("dbo")
        {
        }

        public EmployeeOneEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EmployeeThree
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class EmployeeThreeEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmployeeThreeEntity>
    {
        public EmployeeThreeEntityMapping()
            : this("dbo")
        {
        }

        public EmployeeThreeEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // EmployeeTwo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class EmployeeTwoEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmployeeTwoEntity>
    {
        public EmployeeTwoEntityMapping()
            : this("dbo")
        {
        }

        public EmployeeTwoEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class ErrorLogEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ErrorLogEntity>
    {
        public ErrorLogEntityMapping()
            : this("dbo")
        {
        }

        public ErrorLogEntityMapping(string schema)
        {
            Property(x => x.ErrorSeverity).IsOptional();
            Property(x => x.ErrorState).IsOptional();
            Property(x => x.ErrorProcedure).IsOptional();
            Property(x => x.ErrorLine).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Gloves
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class GloveEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GloveEntity>
    {
        public GloveEntityMapping()
            : this("dbo")
        {
        }

        public GloveEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // NewProducts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class NewProductEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NewProductEntity>
    {
        public NewProductEntityMapping()
            : this("dbo")
        {
        }

        public NewProductEntityMapping(string schema)
        {
            Property(x => x.Color).IsOptional();
            Property(x => x.StandardCost).HasPrecision(19,4);
            Property(x => x.ListPrice).HasPrecision(19,4);
            Property(x => x.Size).IsOptional();
            Property(x => x.SizeUnitMeasureCode).IsOptional().IsFixedLength();
            Property(x => x.WeightUnitMeasureCode).IsOptional().IsFixedLength();
            Property(x => x.Weight).IsOptional().HasPrecision(8,2);
            Property(x => x.ProductLine).IsOptional().IsFixedLength();
            Property(x => x.Class).IsOptional().IsFixedLength();
            Property(x => x.Style).IsOptional().IsFixedLength();
            Property(x => x.ProductSubcategoryId).IsOptional();
            Property(x => x.ProductModelId).IsOptional();
            Property(x => x.SellEndDate).IsOptional();
            Property(x => x.DiscontinuedDate).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ProductResults
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class ProductResultEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProductResultEntity>
    {
        public ProductResultEntityMapping()
            : this("dbo")
        {
        }

        public ProductResultEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class UspGetBillOfMaterialsReturnModel
    {
        public System.Int32? ProductAssemblyID { get; set; }
        public System.Int32? ComponentID { get; set; }
        public System.String ComponentDesc { get; set; }
        public System.Decimal? TotalQuantity { get; set; }
        public System.Decimal? StandardCost { get; set; }
        public System.Decimal? ListPrice { get; set; }
        public System.Int16? BOMLevel { get; set; }
        public System.Int32? RecursionLevel { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class UspGetEmployeeManagersReturnModel
    {
        public System.Int32? RecursionLevel { get; set; }
        public System.Int32? BusinessEntityID { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.String OrganizationNode { get; set; }
        public System.String ManagerFirstName { get; set; }
        public System.String ManagerLastName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class UspGetManagerEmployeesReturnModel
    {
        public System.Int32? RecursionLevel { get; set; }
        public System.String OrganizationNode { get; set; }
        public System.String ManagerFirstName { get; set; }
        public System.String ManagerLastName { get; set; }
        public System.Int32? BusinessEntityID { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class UspGetWhereUsedProductIdReturnModel
    {
        public System.Int32? ProductAssemblyID { get; set; }
        public System.Int32? ComponentID { get; set; }
        public System.String ComponentDesc { get; set; }
        public System.Decimal? TotalQuantity { get; set; }
        public System.Decimal? StandardCost { get; set; }
        public System.Decimal? ListPrice { get; set; }
        public System.Int16? BOMLevel { get; set; }
        public System.Int32? RecursionLevel { get; set; }
    }

    #endregion

}
// </auto-generated>

