

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AW_SalesDAL\App.config"
//     Connection String Name: "AW2016_SalesDb"
//     Connection String:      "Data Source=DESKTOP-PDAFJ6Q;Initial Catalog=AdventureWorks2016;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 13.0.5026.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AW_SalesDAL
{
    using System.Linq;

    #region Unit of work

    public partial interface ISalesDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Sales_CountryRegionCurrencyEntity> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        System.Data.Entity.DbSet<Sales_CreditCardEntity> Sales_CreditCards { get; set; } // CreditCard
        System.Data.Entity.DbSet<Sales_CurrencyEntity> Sales_Currencies { get; set; } // Currency
        System.Data.Entity.DbSet<Sales_CurrencyRateEntity> Sales_CurrencyRates { get; set; } // CurrencyRate
        System.Data.Entity.DbSet<Sales_CustomerEntity> Sales_Customers { get; set; } // Customer
        System.Data.Entity.DbSet<Sales_PersonCreditCardEntity> Sales_PersonCreditCards { get; set; } // PersonCreditCard
        System.Data.Entity.DbSet<Sales_SalesOrderDetailEntity> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail
        System.Data.Entity.DbSet<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader
        System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReasonEntity> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        System.Data.Entity.DbSet<Sales_SalesPersonEntity> Sales_SalesPersons { get; set; } // SalesPerson
        System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistoryEntity> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        System.Data.Entity.DbSet<Sales_SalesReasonEntity> Sales_SalesReasons { get; set; } // SalesReason
        System.Data.Entity.DbSet<Sales_SalesTaxRateEntity> Sales_SalesTaxRates { get; set; } // SalesTaxRate
        System.Data.Entity.DbSet<Sales_SalesTerritoryEntity> Sales_SalesTerritories { get; set; } // SalesTerritory
        System.Data.Entity.DbSet<Sales_SalesTerritoryHistoryEntity> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        System.Data.Entity.DbSet<Sales_ShoppingCartItemEntity> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem
        System.Data.Entity.DbSet<Sales_SpecialOfferEntity> Sales_SpecialOffers { get; set; } // SpecialOffer
        System.Data.Entity.DbSet<Sales_SpecialOfferProductEntity> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        System.Data.Entity.DbSet<Sales_StoreEntity> Sales_Stores { get; set; } // Store
        System.Data.Entity.DbSet<Sales_VIndividualCustomerEntity> Sales_VIndividualCustomers { get; set; } // vIndividualCustomer
        System.Data.Entity.DbSet<Sales_VPersonDemographicEntity> Sales_VPersonDemographics { get; set; } // vPersonDemographics
        System.Data.Entity.DbSet<Sales_VSalesPersonEntity> Sales_VSalesPersons { get; set; } // vSalesPerson
        System.Data.Entity.DbSet<Sales_VSalesPersonSalesByFiscalYearEntity> Sales_VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        System.Data.Entity.DbSet<Sales_VStoreWithAddressEntity> Sales_VStoreWithAddresses { get; set; } // vStoreWithAddresses
        System.Data.Entity.DbSet<Sales_VStoreWithContactEntity> Sales_VStoreWithContacts { get; set; } // vStoreWithContacts
        System.Data.Entity.DbSet<Sales_VStoreWithDemographicEntity> Sales_VStoreWithDemographics { get; set; } // vStoreWithDemographics

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class SalesDbContext : System.Data.Entity.DbContext, ISalesDbContext
    {
        public System.Data.Entity.DbSet<Sales_CountryRegionCurrencyEntity> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        public System.Data.Entity.DbSet<Sales_CreditCardEntity> Sales_CreditCards { get; set; } // CreditCard
        public System.Data.Entity.DbSet<Sales_CurrencyEntity> Sales_Currencies { get; set; } // Currency
        public System.Data.Entity.DbSet<Sales_CurrencyRateEntity> Sales_CurrencyRates { get; set; } // CurrencyRate
        public System.Data.Entity.DbSet<Sales_CustomerEntity> Sales_Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<Sales_PersonCreditCardEntity> Sales_PersonCreditCards { get; set; } // PersonCreditCard
        public System.Data.Entity.DbSet<Sales_SalesOrderDetailEntity> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReasonEntity> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        public System.Data.Entity.DbSet<Sales_SalesPersonEntity> Sales_SalesPersons { get; set; } // SalesPerson
        public System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistoryEntity> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        public System.Data.Entity.DbSet<Sales_SalesReasonEntity> Sales_SalesReasons { get; set; } // SalesReason
        public System.Data.Entity.DbSet<Sales_SalesTaxRateEntity> Sales_SalesTaxRates { get; set; } // SalesTaxRate
        public System.Data.Entity.DbSet<Sales_SalesTerritoryEntity> Sales_SalesTerritories { get; set; } // SalesTerritory
        public System.Data.Entity.DbSet<Sales_SalesTerritoryHistoryEntity> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        public System.Data.Entity.DbSet<Sales_ShoppingCartItemEntity> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem
        public System.Data.Entity.DbSet<Sales_SpecialOfferEntity> Sales_SpecialOffers { get; set; } // SpecialOffer
        public System.Data.Entity.DbSet<Sales_SpecialOfferProductEntity> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public System.Data.Entity.DbSet<Sales_StoreEntity> Sales_Stores { get; set; } // Store
        public System.Data.Entity.DbSet<Sales_VIndividualCustomerEntity> Sales_VIndividualCustomers { get; set; } // vIndividualCustomer
        public System.Data.Entity.DbSet<Sales_VPersonDemographicEntity> Sales_VPersonDemographics { get; set; } // vPersonDemographics
        public System.Data.Entity.DbSet<Sales_VSalesPersonEntity> Sales_VSalesPersons { get; set; } // vSalesPerson
        public System.Data.Entity.DbSet<Sales_VSalesPersonSalesByFiscalYearEntity> Sales_VSalesPersonSalesByFiscalYears { get; set; } // vSalesPersonSalesByFiscalYears
        public System.Data.Entity.DbSet<Sales_VStoreWithAddressEntity> Sales_VStoreWithAddresses { get; set; } // vStoreWithAddresses
        public System.Data.Entity.DbSet<Sales_VStoreWithContactEntity> Sales_VStoreWithContacts { get; set; } // vStoreWithContacts
        public System.Data.Entity.DbSet<Sales_VStoreWithDemographicEntity> Sales_VStoreWithDemographics { get; set; } // vStoreWithDemographics

        static SalesDbContext()
        {
            System.Data.Entity.Database.SetInitializer<SalesDbContext>(null);
        }

        public SalesDbContext()
            : base("Name=AW2016_SalesDb")
        {
            InitializePartial();
        }

        public SalesDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public SalesDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public SalesDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public SalesDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyEntityMapping());
            modelBuilder.Configurations.Add(new Sales_CreditCardEntityMapping());
            modelBuilder.Configurations.Add(new Sales_CurrencyEntityMapping());
            modelBuilder.Configurations.Add(new Sales_CurrencyRateEntityMapping());
            modelBuilder.Configurations.Add(new Sales_CustomerEntityMapping());
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesPersonEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesReasonEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryEntityMapping());
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferEntityMapping());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductEntityMapping());
            modelBuilder.Configurations.Add(new Sales_StoreEntityMapping());
            modelBuilder.Configurations.Add(new Sales_VIndividualCustomerEntityMapping());
            modelBuilder.Configurations.Add(new Sales_VPersonDemographicEntityMapping());
            modelBuilder.Configurations.Add(new Sales_VSalesPersonEntityMapping());
            modelBuilder.Configurations.Add(new Sales_VSalesPersonSalesByFiscalYearEntityMapping());
            modelBuilder.Configurations.Add(new Sales_VStoreWithAddressEntityMapping());
            modelBuilder.Configurations.Add(new Sales_VStoreWithContactEntityMapping());
            modelBuilder.Configurations.Add(new Sales_VStoreWithDemographicEntityMapping());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_CreditCardEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyRateEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_CustomerEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesReasonEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_StoreEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_VIndividualCustomerEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_VPersonDemographicEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_VSalesPersonEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_VSalesPersonSalesByFiscalYearEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithAddressEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithContactEntityMapping(schema));
            modelBuilder.Configurations.Add(new Sales_VStoreWithDemographicEntityMapping(schema));
            OnCreateModelPartial(modelBuilder, schema);
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
		static partial void OnCreateModelPartial(System.Data.Entity.DbModelBuilder modelBuilder, string schema);        
    }
    #endregion

    #region Database context factory

    public partial class SalesDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<SalesDbContext>
    {
        public SalesDbContext Create()
        {
            return new SalesDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeSalesDbContext : ISalesDbContext
    {
        public System.Data.Entity.DbSet<Sales_CountryRegionCurrencyEntity> Sales_CountryRegionCurrencies { get; set; }
        public System.Data.Entity.DbSet<Sales_CreditCardEntity> Sales_CreditCards { get; set; }
        public System.Data.Entity.DbSet<Sales_CurrencyEntity> Sales_Currencies { get; set; }
        public System.Data.Entity.DbSet<Sales_CurrencyRateEntity> Sales_CurrencyRates { get; set; }
        public System.Data.Entity.DbSet<Sales_CustomerEntity> Sales_Customers { get; set; }
        public System.Data.Entity.DbSet<Sales_PersonCreditCardEntity> Sales_PersonCreditCards { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderDetailEntity> Sales_SalesOrderDetails { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReasonEntity> Sales_SalesOrderHeaderSalesReasons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesPersonEntity> Sales_SalesPersons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistoryEntity> Sales_SalesPersonQuotaHistories { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesReasonEntity> Sales_SalesReasons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTaxRateEntity> Sales_SalesTaxRates { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTerritoryEntity> Sales_SalesTerritories { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTerritoryHistoryEntity> Sales_SalesTerritoryHistories { get; set; }
        public System.Data.Entity.DbSet<Sales_ShoppingCartItemEntity> Sales_ShoppingCartItems { get; set; }
        public System.Data.Entity.DbSet<Sales_SpecialOfferEntity> Sales_SpecialOffers { get; set; }
        public System.Data.Entity.DbSet<Sales_SpecialOfferProductEntity> Sales_SpecialOfferProducts { get; set; }
        public System.Data.Entity.DbSet<Sales_StoreEntity> Sales_Stores { get; set; }
        public System.Data.Entity.DbSet<Sales_VIndividualCustomerEntity> Sales_VIndividualCustomers { get; set; }
        public System.Data.Entity.DbSet<Sales_VPersonDemographicEntity> Sales_VPersonDemographics { get; set; }
        public System.Data.Entity.DbSet<Sales_VSalesPersonEntity> Sales_VSalesPersons { get; set; }
        public System.Data.Entity.DbSet<Sales_VSalesPersonSalesByFiscalYearEntity> Sales_VSalesPersonSalesByFiscalYears { get; set; }
        public System.Data.Entity.DbSet<Sales_VStoreWithAddressEntity> Sales_VStoreWithAddresses { get; set; }
        public System.Data.Entity.DbSet<Sales_VStoreWithContactEntity> Sales_VStoreWithContacts { get; set; }
        public System.Data.Entity.DbSet<Sales_VStoreWithDemographicEntity> Sales_VStoreWithDemographics { get; set; }

        public FakeSalesDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Sales_CountryRegionCurrencies = new FakeDbSet<Sales_CountryRegionCurrencyEntity>("CountryRegionCode", "CurrencyCode");
            Sales_CreditCards = new FakeDbSet<Sales_CreditCardEntity>("CreditCardId");
            Sales_Currencies = new FakeDbSet<Sales_CurrencyEntity>("CurrencyCode");
            Sales_CurrencyRates = new FakeDbSet<Sales_CurrencyRateEntity>("CurrencyRateId");
            Sales_Customers = new FakeDbSet<Sales_CustomerEntity>("CustomerId");
            Sales_PersonCreditCards = new FakeDbSet<Sales_PersonCreditCardEntity>("BusinessEntityId", "CreditCardId");
            Sales_SalesOrderDetails = new FakeDbSet<Sales_SalesOrderDetailEntity>("SalesOrderId", "SalesOrderDetailId");
            Sales_SalesOrderHeaders = new FakeDbSet<Sales_SalesOrderHeaderEntity>("SalesOrderId");
            Sales_SalesOrderHeaderSalesReasons = new FakeDbSet<Sales_SalesOrderHeaderSalesReasonEntity>("SalesOrderId", "SalesReasonId");
            Sales_SalesPersons = new FakeDbSet<Sales_SalesPersonEntity>("BusinessEntityId");
            Sales_SalesPersonQuotaHistories = new FakeDbSet<Sales_SalesPersonQuotaHistoryEntity>("BusinessEntityId", "QuotaDate");
            Sales_SalesReasons = new FakeDbSet<Sales_SalesReasonEntity>("SalesReasonId");
            Sales_SalesTaxRates = new FakeDbSet<Sales_SalesTaxRateEntity>("SalesTaxRateId");
            Sales_SalesTerritories = new FakeDbSet<Sales_SalesTerritoryEntity>("TerritoryId");
            Sales_SalesTerritoryHistories = new FakeDbSet<Sales_SalesTerritoryHistoryEntity>("BusinessEntityId", "StartDate", "TerritoryId");
            Sales_ShoppingCartItems = new FakeDbSet<Sales_ShoppingCartItemEntity>("ShoppingCartItemId");
            Sales_SpecialOffers = new FakeDbSet<Sales_SpecialOfferEntity>("SpecialOfferId");
            Sales_SpecialOfferProducts = new FakeDbSet<Sales_SpecialOfferProductEntity>("SpecialOfferId", "ProductId");
            Sales_Stores = new FakeDbSet<Sales_StoreEntity>("BusinessEntityId");
            Sales_VIndividualCustomers = new FakeDbSet<Sales_VIndividualCustomerEntity>("BusinessEntityId", "FirstName", "LastName", "EmailPromotion", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            Sales_VPersonDemographics = new FakeDbSet<Sales_VPersonDemographicEntity>("BusinessEntityId");
            Sales_VSalesPersons = new FakeDbSet<Sales_VSalesPersonEntity>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "EmailPromotion", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName", "SalesYtd", "SalesLastYear");
            Sales_VSalesPersonSalesByFiscalYears = new FakeDbSet<Sales_VSalesPersonSalesByFiscalYearEntity>("JobTitle", "SalesTerritory");
            Sales_VStoreWithAddresses = new FakeDbSet<Sales_VStoreWithAddressEntity>("BusinessEntityId", "Name", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            Sales_VStoreWithContacts = new FakeDbSet<Sales_VStoreWithContactEntity>("BusinessEntityId", "Name", "ContactType", "FirstName", "LastName", "EmailPromotion");
            Sales_VStoreWithDemographics = new FakeDbSet<Sales_VStoreWithDemographicEntity>("BusinessEntityId", "Name");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // CountryRegionCurrency
    ///<summary>
    /// Cross-reference table mapping ISO currency codes to a country or region.
    ///</summary>
    [Table("CountryRegionCurrency", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CountryRegionCurrencyEntity
    {

        ///<summary>
        /// ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionCode", Order = 1, TypeName = "nvarchar")]
        [Index(@"PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// ISO standard currency code. Foreign key to Currency.CurrencyCode.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CurrencyCode", Order = 2, TypeName = "nchar")]
        [Index(@"IX_CountryRegionCurrency_CurrencyCode", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Currency code")]
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_Currency pointed by [CountryRegionCurrency].([CurrencyCode]) (FK_CountryRegionCurrency_Currency_CurrencyCode)
        /// </summary>
        [ForeignKey("CurrencyCode"), Required] public virtual Sales_CurrencyEntity Sales_Currency { get; set; } // FK_CountryRegionCurrency_Currency_CurrencyCode

        public Sales_CountryRegionCurrencyEntity()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CreditCard
    ///<summary>
    /// Customer credit card information.
    ///</summary>
    [Table("CreditCard", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CreditCardEntity
    {

        ///<summary>
        /// Primary key for CreditCard records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CreditCardID", Order = 1, TypeName = "int")]
        [Index(@"PK_CreditCard_CreditCardID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Credit card ID")]
        public int CreditCardId { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Credit card name.
        ///</summary>
        [Column(@"CardType", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Card type")]
        public string CardType { get; set; } // CardType (length: 50)

        ///<summary>
        /// Credit card number.
        ///</summary>
        [Column(@"CardNumber", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_CreditCard_CardNumber", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Card number")]
        public string CardNumber { get; set; } // CardNumber (length: 25)

        ///<summary>
        /// Credit card expiration month.
        ///</summary>
        [Column(@"ExpMonth", Order = 4, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Exp month")]
        public byte ExpMonth { get; set; } // ExpMonth

        ///<summary>
        /// Credit card expiration year.
        ///</summary>
        [Column(@"ExpYear", Order = 5, TypeName = "smallint")]
        [Required]
        [Display(Name = "Exp year")]
        public short ExpYear { get; set; } // ExpYear

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_PersonCreditCards where [PersonCreditCard].[CreditCardID] point to this entity (FK_PersonCreditCard_CreditCard_CreditCardID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_PersonCreditCardEntity> Sales_PersonCreditCards { get; set; } // PersonCreditCard.FK_PersonCreditCard_CreditCard_CreditCardID
        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CreditCardID] point to this entity (FK_SalesOrderHeader_CreditCard_CreditCardID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CreditCard_CreditCardID

        public Sales_CreditCardEntity()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_PersonCreditCards = new System.Collections.Generic.List<Sales_PersonCreditCardEntity>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeaderEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Currency
    ///<summary>
    /// Lookup table containing standard ISO currencies.
    ///</summary>
    [Table("Currency", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CurrencyEntity
    {

        ///<summary>
        /// The ISO code for the Currency.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CurrencyCode", Order = 1, TypeName = "nchar")]
        [Index(@"PK_Currency_CurrencyCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Currency code")]
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Currency name.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Currency_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_CountryRegionCurrencies where [CountryRegionCurrency].[CurrencyCode] point to this entity (FK_CountryRegionCurrency_Currency_CurrencyCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CountryRegionCurrencyEntity> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency.FK_CountryRegionCurrency_Currency_CurrencyCode
        /// <summary>
        /// Child Sales_CurrencyRates where [CurrencyRate].[FromCurrencyCode] point to this entity (FK_CurrencyRate_Currency_FromCurrencyCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CurrencyRateEntity> Sales_CurrencyRates_FromCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_FromCurrencyCode
        /// <summary>
        /// Child Sales_CurrencyRates where [CurrencyRate].[ToCurrencyCode] point to this entity (FK_CurrencyRate_Currency_ToCurrencyCode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CurrencyRateEntity> Sales_CurrencyRates_ToCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_ToCurrencyCode

        public Sales_CurrencyEntity()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_CountryRegionCurrencies = new System.Collections.Generic.List<Sales_CountryRegionCurrencyEntity>();
            Sales_CurrencyRates_FromCurrencyCode = new System.Collections.Generic.List<Sales_CurrencyRateEntity>();
            Sales_CurrencyRates_ToCurrencyCode = new System.Collections.Generic.List<Sales_CurrencyRateEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // CurrencyRate
    ///<summary>
    /// Currency exchange rates.
    ///</summary>
    [Table("CurrencyRate", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CurrencyRateEntity
    {

        ///<summary>
        /// Primary key for CurrencyRate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CurrencyRateID", Order = 1, TypeName = "int")]
        [Index(@"PK_CurrencyRate_CurrencyRateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Currency rate ID")]
        public int CurrencyRateId { get; set; } // CurrencyRateID (Primary key)

        ///<summary>
        /// Date and time the exchange rate was obtained.
        ///</summary>
        [Column(@"CurrencyRateDate", Order = 2, TypeName = "datetime")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Currency rate date")]
        public System.DateTime CurrencyRateDate { get; set; } // CurrencyRateDate

        ///<summary>
        /// Exchange rate was converted from this currency code.
        ///</summary>
        [Column(@"FromCurrencyCode", Order = 3, TypeName = "nchar")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 2, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "From currency code")]
        public string FromCurrencyCode { get; set; } // FromCurrencyCode (length: 3)

        ///<summary>
        /// Exchange rate was converted to this currency code.
        ///</summary>
        [Column(@"ToCurrencyCode", Order = 4, TypeName = "nchar")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 3, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "To currency code")]
        public string ToCurrencyCode { get; set; } // ToCurrencyCode (length: 3)

        ///<summary>
        /// Average exchange rate for the day.
        ///</summary>
        [Column(@"AverageRate", Order = 5, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Average rate")]
        public decimal AverageRate { get; set; } // AverageRate

        ///<summary>
        /// Final exchange rate for the day.
        ///</summary>
        [Column(@"EndOfDayRate", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "End of day rate")]
        public decimal EndOfDayRate { get; set; } // EndOfDayRate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CurrencyRateID] point to this entity (FK_SalesOrderHeader_CurrencyRate_CurrencyRateID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        // Foreign keys

        /// <summary>
        /// Parent Sales_Currency pointed by [CurrencyRate].([FromCurrencyCode]) (FK_CurrencyRate_Currency_FromCurrencyCode)
        /// </summary>
        [ForeignKey("FromCurrencyCode"), Required] public virtual Sales_CurrencyEntity Sales_Currency_FromCurrencyCode { get; set; } // FK_CurrencyRate_Currency_FromCurrencyCode

        /// <summary>
        /// Parent Sales_Currency pointed by [CurrencyRate].([ToCurrencyCode]) (FK_CurrencyRate_Currency_ToCurrencyCode)
        /// </summary>
        [ForeignKey("ToCurrencyCode"), Required] public virtual Sales_CurrencyEntity Sales_Currency_ToCurrencyCode { get; set; } // FK_CurrencyRate_Currency_ToCurrencyCode

        public Sales_CurrencyRateEntity()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeaderEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Customer
    ///<summary>
    /// Current customer information. Also see the Person and Store tables.
    ///</summary>
    [Table("Customer", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CustomerEntity
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CustomerID", Order = 1, TypeName = "int")]
        [Index(@"PK_Customer_CustomerID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Customer ID")]
        public int CustomerId { get; set; } // CustomerID (Primary key)

        ///<summary>
        /// Foreign key to Person.BusinessEntityID
        ///</summary>
        [Column(@"PersonID", Order = 2, TypeName = "int")]
        [Display(Name = "Person ID")]
        public int? PersonId { get; set; } // PersonID

        ///<summary>
        /// Foreign key to Store.BusinessEntityID
        ///</summary>
        [Column(@"StoreID", Order = 3, TypeName = "int")]
        [Display(Name = "Store ID")]
        public int? StoreId { get; set; } // StoreID

        ///<summary>
        /// ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 4, TypeName = "int")]
        [Index(@"IX_Customer_TerritoryID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Territory ID")]
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Unique number identifying the customer assigned by the accounting system.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"AccountNumber", Order = 5, TypeName = "varchar")]
        [Index(@"AK_Customer_AccountNumber", 1, IsUnique = true, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Account number")]
        public string AccountNumber { get; private set; } // AccountNumber (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 6, TypeName = "uniqueidentifier")]
        [Index(@"AK_Customer_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CustomerID] point to this entity (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        // Foreign keys

        /// <summary>
        /// Parent Sales_Store pointed by [Customer].([StoreId]) (FK_Customer_Store_StoreID)
        /// </summary>
        [ForeignKey("StoreId")] public virtual Sales_StoreEntity Sales_Store { get; set; } // FK_Customer_Store_StoreID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [Customer].([TerritoryId]) (FK_Customer_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryId")] public virtual Sales_SalesTerritoryEntity Sales_SalesTerritory { get; set; } // FK_Customer_SalesTerritory_TerritoryID

        public Sales_CustomerEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeaderEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PersonCreditCard
    ///<summary>
    /// Cross-reference table mapping people to their credit card information in the CreditCard table.
    ///</summary>
    [Table("PersonCreditCard", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_PersonCreditCardEntity
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_PersonCreditCard_BusinessEntityID_CreditCardID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CreditCardID", Order = 2, TypeName = "int")]
        [Index(@"PK_PersonCreditCard_BusinessEntityID_CreditCardID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Credit card ID")]
        public int CreditCardId { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_CreditCard pointed by [PersonCreditCard].([CreditCardId]) (FK_PersonCreditCard_CreditCard_CreditCardID)
        /// </summary>
        [ForeignKey("CreditCardId"), Required] public virtual Sales_CreditCardEntity Sales_CreditCard { get; set; } // FK_PersonCreditCard_CreditCard_CreditCardID

        public Sales_PersonCreditCardEntity()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesOrderDetail
    ///<summary>
    /// Individual products associated with a specific sales order. See SalesOrderHeader.
    ///</summary>
    [Table("SalesOrderDetail", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesOrderDetailEntity
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order ID")]
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. One incremental unique number per product sold.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesOrderDetailID", Order = 2, TypeName = "int")]
        [Index(@"PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order detail ID")]
        public int SalesOrderDetailId { get; set; } // SalesOrderDetailID (Primary key)

        ///<summary>
        /// Shipment tracking number supplied by the shipper.
        ///</summary>
        [Column(@"CarrierTrackingNumber", Order = 3, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Carrier tracking number")]
        public string CarrierTrackingNumber { get; set; } // CarrierTrackingNumber (length: 25)

        ///<summary>
        /// Quantity ordered per product.
        ///</summary>
        [Column(@"OrderQty", Order = 4, TypeName = "smallint")]
        [Required]
        [Display(Name = "Order qty")]
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product sold to customer. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 5, TypeName = "int")]
        [Index(@"IX_SalesOrderDetail_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Promotional code. Foreign key to SpecialOffer.SpecialOfferID.
        ///</summary>
        [Column(@"SpecialOfferID", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Special offer ID")]
        public int SpecialOfferId { get; set; } // SpecialOfferID

        ///<summary>
        /// Selling price of a single product.
        ///</summary>
        [Column(@"UnitPrice", Order = 7, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Unit price")]
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Discount amount.
        ///</summary>
        [Column(@"UnitPriceDiscount", Order = 8, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Unit price discount")]
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount

        ///<summary>
        /// Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"LineTotal", Order = 9, TypeName = "numeric")]
        [Display(Name = "Line total")]
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 10, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesOrderDetail_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesOrderHeader pointed by [SalesOrderDetail].([SalesOrderId]) (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        [ForeignKey("SalesOrderId"), Required] public virtual Sales_SalesOrderHeaderEntity Sales_SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID

        /// <summary>
        /// Parent Sales_SpecialOfferProduct pointed by [SalesOrderDetail].([SpecialOfferId], [ProductId]) (FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID)
        /// </summary>
        [ForeignKey("SpecialOfferId, ProductId"), Required] public virtual Sales_SpecialOfferProductEntity Sales_SpecialOfferProduct { get; set; } // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        public Sales_SalesOrderDetailEntity()
        {
            UnitPriceDiscount = 0.0m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesOrderHeader
    ///<summary>
    /// General sales order information.
    ///</summary>
    [Table("SalesOrderHeader", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesOrderHeaderEntity
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesOrderHeader_SalesOrderID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order ID")]
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the sales order over time.
        ///</summary>
        [Column(@"RevisionNumber", Order = 2, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Revision number")]
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Dates the sales order was created.
        ///</summary>
        [Column(@"OrderDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Order date")]
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Date the order is due to the customer.
        ///</summary>
        [Column(@"DueDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Due date")]
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Date the order was shipped to the customer.
        ///</summary>
        [Column(@"ShipDate", Order = 5, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Ship date")]
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        ///</summary>
        [Column(@"Status", Order = 6, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Status")]
        public byte Status { get; set; } // Status

        ///<summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        ///</summary>
        [Column(@"OnlineOrderFlag", Order = 7, TypeName = "bit")]
        [Required]
        [Display(Name = "Online order flag")]
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag

        ///<summary>
        /// Unique sales order identification number.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"SalesOrderNumber", Order = 8, TypeName = "nvarchar")]
        [Index(@"AK_SalesOrderHeader_SalesOrderNumber", 1, IsUnique = true, IsClustered = false)]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Sales order number")]
        public string SalesOrderNumber { get; private set; } // SalesOrderNumber (length: 25)

        ///<summary>
        /// Customer purchase order number reference.
        ///</summary>
        [Column(@"PurchaseOrderNumber", Order = 9, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Display(Name = "Purchase order number")]
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber (length: 25)

        ///<summary>
        /// Financial accounting number reference.
        ///</summary>
        [Column(@"AccountNumber", Order = 10, TypeName = "nvarchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Account number")]
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Customer identification number. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        [Column(@"CustomerID", Order = 11, TypeName = "int")]
        [Index(@"IX_SalesOrderHeader_CustomerID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Customer ID")]
        public int CustomerId { get; set; } // CustomerID

        ///<summary>
        /// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [Column(@"SalesPersonID", Order = 12, TypeName = "int")]
        [Index(@"IX_SalesOrderHeader_SalesPersonID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Sales person ID")]
        public int? SalesPersonId { get; set; } // SalesPersonID

        ///<summary>
        /// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 13, TypeName = "int")]
        [Display(Name = "Territory ID")]
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Customer billing address. Foreign key to Address.AddressID.
        ///</summary>
        [Column(@"BillToAddressID", Order = 14, TypeName = "int")]
        [Required]
        [Display(Name = "Bill to address ID")]
        public int BillToAddressId { get; set; } // BillToAddressID

        ///<summary>
        /// Customer shipping address. Foreign key to Address.AddressID.
        ///</summary>
        [Column(@"ShipToAddressID", Order = 15, TypeName = "int")]
        [Required]
        [Display(Name = "Ship to address ID")]
        public int ShipToAddressId { get; set; } // ShipToAddressID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        [Column(@"ShipMethodID", Order = 16, TypeName = "int")]
        [Required]
        [Display(Name = "Ship method ID")]
        public int ShipMethodId { get; set; } // ShipMethodID

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        [Column(@"CreditCardID", Order = 17, TypeName = "int")]
        [Display(Name = "Credit card ID")]
        public int? CreditCardId { get; set; } // CreditCardID

        ///<summary>
        /// Approval code provided by the credit card company.
        ///</summary>
        [Column(@"CreditCardApprovalCode", Order = 18, TypeName = "varchar")]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Credit card approval code")]
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode (length: 15)

        ///<summary>
        /// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        ///</summary>
        [Column(@"CurrencyRateID", Order = 19, TypeName = "int")]
        [Display(Name = "Currency rate ID")]
        public int? CurrencyRateId { get; set; } // CurrencyRateID

        ///<summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        ///</summary>
        [Column(@"SubTotal", Order = 20, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sub total")]
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        [Column(@"TaxAmt", Order = 21, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Tax amt")]
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        [Column(@"Freight", Order = 22, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Freight")]
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"TotalDue", Order = 23, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Total due")]
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Sales representative comments.
        ///</summary>
        [Column(@"Comment", Order = 24, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Comment")]
        public string Comment { get; set; } // Comment (length: 128)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 25, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesOrderHeader_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 26, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderDetails where [SalesOrderDetail].[SalesOrderID] point to this entity (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderDetailEntity> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        /// <summary>
        /// Child Sales_SalesOrderHeaderSalesReasons where [SalesOrderHeaderSalesReason].[SalesOrderID] point to this entity (FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderSalesReasonEntity> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason.FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID

        // Foreign keys

        /// <summary>
        /// Parent Sales_CreditCard pointed by [SalesOrderHeader].([CreditCardId]) (FK_SalesOrderHeader_CreditCard_CreditCardID)
        /// </summary>
        [ForeignKey("CreditCardId")] public virtual Sales_CreditCardEntity Sales_CreditCard { get; set; } // FK_SalesOrderHeader_CreditCard_CreditCardID

        /// <summary>
        /// Parent Sales_CurrencyRate pointed by [SalesOrderHeader].([CurrencyRateId]) (FK_SalesOrderHeader_CurrencyRate_CurrencyRateID)
        /// </summary>
        [ForeignKey("CurrencyRateId")] public virtual Sales_CurrencyRateEntity Sales_CurrencyRate { get; set; } // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        /// <summary>
        /// Parent Sales_Customer pointed by [SalesOrderHeader].([CustomerId]) (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        [ForeignKey("CustomerId"), Required] public virtual Sales_CustomerEntity Sales_Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [SalesOrderHeader].([SalesPersonId]) (FK_SalesOrderHeader_SalesPerson_SalesPersonID)
        /// </summary>
        [ForeignKey("SalesPersonId")] public virtual Sales_SalesPersonEntity Sales_SalesPerson { get; set; } // FK_SalesOrderHeader_SalesPerson_SalesPersonID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [SalesOrderHeader].([TerritoryId]) (FK_SalesOrderHeader_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryId")] public virtual Sales_SalesTerritoryEntity Sales_SalesTerritory { get; set; } // FK_SalesOrderHeader_SalesTerritory_TerritoryID

        public Sales_SalesOrderHeaderEntity()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderDetails = new System.Collections.Generic.List<Sales_SalesOrderDetailEntity>();
            Sales_SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<Sales_SalesOrderHeaderSalesReasonEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesOrderHeaderSalesReason
    ///<summary>
    /// Cross-reference table mapping sales orders to sales reason codes.
    ///</summary>
    [Table("SalesOrderHeaderSalesReason", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesOrderHeaderSalesReasonEntity
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales order ID")]
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to SalesReason.SalesReasonID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesReasonID", Order = 2, TypeName = "int")]
        [Index(@"PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales reason ID")]
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesOrderHeader pointed by [SalesOrderHeaderSalesReason].([SalesOrderId]) (FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID)
        /// </summary>
        [ForeignKey("SalesOrderId"), Required] public virtual Sales_SalesOrderHeaderEntity Sales_SalesOrderHeader { get; set; } // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID

        /// <summary>
        /// Parent Sales_SalesReason pointed by [SalesOrderHeaderSalesReason].([SalesReasonId]) (FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID)
        /// </summary>
        [ForeignKey("SalesReasonId"), Required] public virtual Sales_SalesReasonEntity Sales_SalesReason { get; set; } // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID

        public Sales_SalesOrderHeaderSalesReasonEntity()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesPerson
    ///<summary>
    /// Sales representative current information.
    ///</summary>
    [Table("SalesPerson", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesPersonEntity
    {

        ///<summary>
        /// Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesPerson_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 2, TypeName = "int")]
        [Display(Name = "Territory ID")]
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Projected yearly sales.
        ///</summary>
        [Column(@"SalesQuota", Order = 3, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales quota")]
        public decimal? SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// Bonus due if quota is met.
        ///</summary>
        [Column(@"Bonus", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Bonus")]
        public decimal Bonus { get; set; } // Bonus

        ///<summary>
        /// Commision percent received per sale.
        ///</summary>
        [Column(@"CommissionPct", Order = 5, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Commission pct")]
        public decimal CommissionPct { get; set; } // CommissionPct

        ///<summary>
        /// Sales total year to date.
        ///</summary>
        [Column(@"SalesYTD", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales ytd")]
        public decimal SalesYtd { get; set; } // SalesYTD

        ///<summary>
        /// Sales total of previous year.
        ///</summary>
        [Column(@"SalesLastYear", Order = 7, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales last year")]
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 8, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesPerson_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 9, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[SalesPersonID] point to this entity (FK_SalesOrderHeader_SalesPerson_SalesPersonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesPerson_SalesPersonID
        /// <summary>
        /// Child Sales_SalesPersonQuotaHistories where [SalesPersonQuotaHistory].[BusinessEntityID] point to this entity (FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesPersonQuotaHistoryEntity> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory.FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID
        /// <summary>
        /// Child Sales_SalesTerritoryHistories where [SalesTerritoryHistory].[BusinessEntityID] point to this entity (FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritoryHistoryEntity> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory.FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
        /// <summary>
        /// Child Sales_Stores where [Store].[SalesPersonID] point to this entity (FK_Store_SalesPerson_SalesPersonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_StoreEntity> Sales_Stores { get; set; } // Store.FK_Store_SalesPerson_SalesPersonID

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [SalesPerson].([TerritoryId]) (FK_SalesPerson_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryId")] public virtual Sales_SalesTerritoryEntity Sales_SalesTerritory { get; set; } // FK_SalesPerson_SalesTerritory_TerritoryID

        public Sales_SalesPersonEntity()
        {
            Bonus = 0.00m;
            CommissionPct = 0.00m;
            SalesYtd = 0.00m;
            SalesLastYear = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeaderEntity>();
            Sales_SalesPersonQuotaHistories = new System.Collections.Generic.List<Sales_SalesPersonQuotaHistoryEntity>();
            Sales_SalesTerritoryHistories = new System.Collections.Generic.List<Sales_SalesTerritoryHistoryEntity>();
            Sales_Stores = new System.Collections.Generic.List<Sales_StoreEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesPersonQuotaHistory
    ///<summary>
    /// Sales performance tracking.
    ///</summary>
    [Table("SalesPersonQuotaHistory", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesPersonQuotaHistoryEntity
    {

        ///<summary>
        /// Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Sales quota date.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"QuotaDate", Order = 2, TypeName = "datetime")]
        [Index(@"PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Quota date")]
        public System.DateTime QuotaDate { get; set; } // QuotaDate (Primary key)

        ///<summary>
        /// Sales quota amount.
        ///</summary>
        [Column(@"SalesQuota", Order = 3, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales quota")]
        public decimal SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 4, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesPersonQuotaHistory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [SalesPersonQuotaHistory].([BusinessEntityId]) (FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Sales_SalesPersonEntity Sales_SalesPerson { get; set; } // FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID

        public Sales_SalesPersonQuotaHistoryEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesReason
    ///<summary>
    /// Lookup table of customer purchase reasons.
    ///</summary>
    [Table("SalesReason", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesReasonEntity
    {

        ///<summary>
        /// Primary key for SalesReason records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesReasonID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesReason_SalesReasonID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales reason ID")]
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Sales reason description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Category the sales reason belongs to.
        ///</summary>
        [Column(@"ReasonType", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Reason type")]
        public string ReasonType { get; set; } // ReasonType (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaderSalesReasons where [SalesOrderHeaderSalesReason].[SalesReasonID] point to this entity (FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderSalesReasonEntity> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason.FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID

        public Sales_SalesReasonEntity()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<Sales_SalesOrderHeaderSalesReasonEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesTaxRate
    ///<summary>
    /// Tax rate lookup table.
    ///</summary>
    [Table("SalesTaxRate", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesTaxRateEntity
    {

        ///<summary>
        /// Primary key for SalesTaxRate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesTaxRateID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesTaxRate_SalesTaxRateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales tax rate ID")]
        public int SalesTaxRateId { get; set; } // SalesTaxRateID (Primary key)

        ///<summary>
        /// State, province, or country/region the sales tax applies to.
        ///</summary>
        [Column(@"StateProvinceID", Order = 2, TypeName = "int")]
        [Index(@"AK_SalesTaxRate_StateProvinceID_TaxType", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "State province ID")]
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.
        ///</summary>
        [Column(@"TaxType", Order = 3, TypeName = "tinyint")]
        [Index(@"AK_SalesTaxRate_StateProvinceID_TaxType", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Tax type")]
        public byte TaxType { get; set; } // TaxType

        ///<summary>
        /// Tax rate amount.
        ///</summary>
        [Column(@"TaxRate", Order = 4, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Tax rate")]
        public decimal TaxRate { get; set; } // TaxRate

        ///<summary>
        /// Tax rate description.
        ///</summary>
        [Column(@"Name", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 6, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesTaxRate_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public Sales_SalesTaxRateEntity()
        {
            TaxRate = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesTerritory
    ///<summary>
    /// Sales territory lookup table.
    ///</summary>
    [Table("SalesTerritory", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesTerritoryEntity
    {

        ///<summary>
        /// Primary key for SalesTerritory records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"TerritoryID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesTerritory_TerritoryID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Territory ID")]
        public int TerritoryId { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Sales territory description
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_SalesTerritory_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        [Column(@"CountryRegionCode", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// Geographic area to which the sales territory belong.
        ///</summary>
        [Column(@"Group", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Group")]
        public string Group { get; set; } // Group (length: 50)

        ///<summary>
        /// Sales in the territory year to date.
        ///</summary>
        [Column(@"SalesYTD", Order = 5, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales ytd")]
        public decimal SalesYtd { get; set; } // SalesYTD

        ///<summary>
        /// Sales in the territory the previous year.
        ///</summary>
        [Column(@"SalesLastYear", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales last year")]
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// Business costs in the territory year to date.
        ///</summary>
        [Column(@"CostYTD", Order = 7, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Cost ytd")]
        public decimal CostYtd { get; set; } // CostYTD

        ///<summary>
        /// Business costs in the territory the previous year.
        ///</summary>
        [Column(@"CostLastYear", Order = 8, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Cost last year")]
        public decimal CostLastYear { get; set; } // CostLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 9, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesTerritory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 10, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_Customers where [Customer].[TerritoryID] point to this entity (FK_Customer_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CustomerEntity> Sales_Customers { get; set; } // Customer.FK_Customer_SalesTerritory_TerritoryID
        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[TerritoryID] point to this entity (FK_SalesOrderHeader_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderEntity> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesTerritory_TerritoryID
        /// <summary>
        /// Child Sales_SalesPersons where [SalesPerson].[TerritoryID] point to this entity (FK_SalesPerson_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesPersonEntity> Sales_SalesPersons { get; set; } // SalesPerson.FK_SalesPerson_SalesTerritory_TerritoryID
        /// <summary>
        /// Child Sales_SalesTerritoryHistories where [SalesTerritoryHistory].[TerritoryID] point to this entity (FK_SalesTerritoryHistory_SalesTerritory_TerritoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritoryHistoryEntity> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory.FK_SalesTerritoryHistory_SalesTerritory_TerritoryID

        public Sales_SalesTerritoryEntity()
        {
            SalesYtd = 0.00m;
            SalesLastYear = 0.00m;
            CostYtd = 0.00m;
            CostLastYear = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_Customers = new System.Collections.Generic.List<Sales_CustomerEntity>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeaderEntity>();
            Sales_SalesPersons = new System.Collections.Generic.List<Sales_SalesPersonEntity>();
            Sales_SalesTerritoryHistories = new System.Collections.Generic.List<Sales_SalesTerritoryHistoryEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SalesTerritoryHistory
    ///<summary>
    /// Sales representative transfers to other sales territories.
    ///</summary>
    [Table("SalesTerritoryHistory", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesTerritoryHistoryEntity
    {

        ///<summary>
        /// Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"TerritoryID", Order = 2, TypeName = "int")]
        [Index(@"PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Territory ID")]
        public int TerritoryId { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Primary key. Date the sales representive started work in the territory.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 3, TypeName = "datetime")]
        [Index(@"PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the sales representative left work in the territory.
        ///</summary>
        [Column(@"EndDate", Order = 4, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 5, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesTerritoryHistory_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [SalesTerritoryHistory].([BusinessEntityId]) (FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Sales_SalesPersonEntity Sales_SalesPerson { get; set; } // FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [SalesTerritoryHistory].([TerritoryId]) (FK_SalesTerritoryHistory_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryId"), Required] public virtual Sales_SalesTerritoryEntity Sales_SalesTerritory { get; set; } // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID

        public Sales_SalesTerritoryHistoryEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ShoppingCartItem
    ///<summary>
    /// Contains online customer orders until the order is submitted or cancelled.
    ///</summary>
    [Table("ShoppingCartItem", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_ShoppingCartItemEntity
    {

        ///<summary>
        /// Primary key for ShoppingCartItem records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ShoppingCartItemID", Order = 1, TypeName = "int")]
        [Index(@"PK_ShoppingCartItem_ShoppingCartItemID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Shopping cart item ID")]
        public int ShoppingCartItemId { get; set; } // ShoppingCartItemID (Primary key)

        ///<summary>
        /// Shopping cart identification number.
        ///</summary>
        [Column(@"ShoppingCartID", Order = 2, TypeName = "nvarchar")]
        [Index(@"IX_ShoppingCartItem_ShoppingCartID_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Shopping cart ID")]
        public string ShoppingCartId { get; set; } // ShoppingCartID (length: 50)

        ///<summary>
        /// Product quantity ordered.
        ///</summary>
        [Column(@"Quantity", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Quantity")]
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product ordered. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 4, TypeName = "int")]
        [Index(@"IX_ShoppingCartItem_ShoppingCartID_ProductID", 2, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Date the time the record was created.
        ///</summary>
        [Column(@"DateCreated", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Date created")]
        public System.DateTime DateCreated { get; set; } // DateCreated

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public Sales_ShoppingCartItemEntity()
        {
            Quantity = 1;
            DateCreated = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SpecialOffer
    ///<summary>
    /// Sale discounts lookup table.
    ///</summary>
    [Table("SpecialOffer", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SpecialOfferEntity
    {

        ///<summary>
        /// Primary key for SpecialOffer records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SpecialOfferID", Order = 1, TypeName = "int")]
        [Index(@"PK_SpecialOffer_SpecialOfferID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Special offer ID")]
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Discount description.
        ///</summary>
        [Column(@"Description", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(255)]
        [StringLength(255)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 255)

        ///<summary>
        /// Discount precentage.
        ///</summary>
        [Column(@"DiscountPct", Order = 3, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Discount pct")]
        public decimal DiscountPct { get; set; } // DiscountPct

        ///<summary>
        /// Discount type category.
        ///</summary>
        [Column(@"Type", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Type")]
        public string Type { get; set; } // Type (length: 50)

        ///<summary>
        /// Group the discount applies to such as Reseller or Customer.
        ///</summary>
        [Column(@"Category", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Category")]
        public string Category { get; set; } // Category (length: 50)

        ///<summary>
        /// Discount start date.
        ///</summary>
        [Column(@"StartDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Discount end date.
        ///</summary>
        [Column(@"EndDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "End date")]
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// Minimum discount percent allowed.
        ///</summary>
        [Column(@"MinQty", Order = 8, TypeName = "int")]
        [Required]
        [Display(Name = "Min qty")]
        public int MinQty { get; set; } // MinQty

        ///<summary>
        /// Maximum discount percent allowed.
        ///</summary>
        [Column(@"MaxQty", Order = 9, TypeName = "int")]
        [Display(Name = "Max qty")]
        public int? MaxQty { get; set; } // MaxQty

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 10, TypeName = "uniqueidentifier")]
        [Index(@"AK_SpecialOffer_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SpecialOfferProducts where [SpecialOfferProduct].[SpecialOfferID] point to this entity (FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SpecialOfferProductEntity> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct.FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public Sales_SpecialOfferEntity()
        {
            DiscountPct = 0.00m;
            MinQty = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SpecialOfferProducts = new System.Collections.Generic.List<Sales_SpecialOfferProductEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // SpecialOfferProduct
    ///<summary>
    /// Cross-reference table mapping products to special offer discounts.
    ///</summary>
    [Table("SpecialOfferProduct", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SpecialOfferProductEntity
    {

        ///<summary>
        /// Primary key for SpecialOfferProduct records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SpecialOfferID", Order = 1, TypeName = "int")]
        [Index(@"PK_SpecialOfferProduct_SpecialOfferID_ProductID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Special offer ID")]
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 2, TypeName = "int")]
        [Index(@"IX_SpecialOfferProduct_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_SpecialOfferProduct_SpecialOfferID_ProductID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 3, TypeName = "uniqueidentifier")]
        [Index(@"AK_SpecialOfferProduct_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderDetails where [SalesOrderDetail].([ProductID], [SpecialOfferID]) point to this entity (FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderDetailEntity> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        // Foreign keys

        /// <summary>
        /// Parent Sales_SpecialOffer pointed by [SpecialOfferProduct].([SpecialOfferId]) (FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID)
        /// </summary>
        [ForeignKey("SpecialOfferId"), Required] public virtual Sales_SpecialOfferEntity Sales_SpecialOffer { get; set; } // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public Sales_SpecialOfferProductEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderDetails = new System.Collections.Generic.List<Sales_SalesOrderDetailEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Store
    ///<summary>
    /// Customers (resellers) of Adventure Works products.
    ///</summary>
    [Table("Store", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_StoreEntity
    {

        ///<summary>
        /// Primary key. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Store_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Name of the store.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        [Column(@"SalesPersonID", Order = 3, TypeName = "int")]
        [Index(@"IX_Store_SalesPersonID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Sales person ID")]
        public int? SalesPersonId { get; set; } // SalesPersonID

        ///<summary>
        /// Demographic informationg about the store such as the number of employees, annual sales and store type.
        ///</summary>
        [Column(@"Demographics", Order = 4, TypeName = "xml")]
        [Display(Name = "Demographics")]
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 5, TypeName = "uniqueidentifier")]
        [Index(@"AK_Store_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_Customers where [Customer].[StoreID] point to this entity (FK_Customer_Store_StoreID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_CustomerEntity> Sales_Customers { get; set; } // Customer.FK_Customer_Store_StoreID

        // Foreign keys

        /// <summary>
        /// Parent Sales_SalesPerson pointed by [Store].([SalesPersonId]) (FK_Store_SalesPerson_SalesPersonID)
        /// </summary>
        [ForeignKey("SalesPersonId")] public virtual Sales_SalesPersonEntity Sales_SalesPerson { get; set; } // FK_Store_SalesPerson_SalesPersonID

        public Sales_StoreEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_Customers = new System.Collections.Generic.List<Sales_CustomerEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vIndividualCustomer
    [Table("vIndividualCustomer", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VIndividualCustomerEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [Column(@"Title", Order = 2, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 4, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"Suffix", Order = 6, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        [Column(@"PhoneNumber", Order = 7, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)

        [Column(@"PhoneNumberType", Order = 8, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Phone number type")]
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)

        [Column(@"EmailAddress", Order = 9, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EmailPromotion", Order = 10, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Email promotion")]
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressType", Order = 11, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Address type")]
        public string AddressType { get; set; } // AddressType (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressLine1", Order = 12, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(60)]
        [StringLength(60)]
        [Key]
        [Display(Name = "Address line 1")]
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)

        [Column(@"AddressLine2", Order = 13, TypeName = "nvarchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 2")]
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"City", Order = 14, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Key]
        [Display(Name = "City")]
        public string City { get; set; } // City (Primary key) (length: 30)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceName", Order = 15, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "State province name")]
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PostalCode", Order = 16, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Key]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionName", Order = 17, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Country region name")]
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)

        [Column(@"Demographics", Order = 18, TypeName = "xml")]
        [Display(Name = "Demographics")]
        public string Demographics { get; set; } // Demographics

        public Sales_VIndividualCustomerEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vPersonDemographics
    [Table("vPersonDemographics", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VPersonDemographicEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [Column(@"TotalPurchaseYTD", Order = 2, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Total purchase ytd")]
        public decimal? TotalPurchaseYtd { get; set; } // TotalPurchaseYTD

        [Column(@"DateFirstPurchase", Order = 3, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Date first purchase")]
        public System.DateTime? DateFirstPurchase { get; set; } // DateFirstPurchase

        [Column(@"BirthDate", Order = 4, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Birth date")]
        public System.DateTime? BirthDate { get; set; } // BirthDate

        [Column(@"MaritalStatus", Order = 5, TypeName = "nvarchar")]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Marital status")]
        public string MaritalStatus { get; set; } // MaritalStatus (length: 1)

        [Column(@"YearlyIncome", Order = 6, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Yearly income")]
        public string YearlyIncome { get; set; } // YearlyIncome (length: 30)

        [Column(@"Gender", Order = 7, TypeName = "nvarchar")]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Gender")]
        public string Gender { get; set; } // Gender (length: 1)

        [Column(@"TotalChildren", Order = 8, TypeName = "int")]
        [Display(Name = "Total children")]
        public int? TotalChildren { get; set; } // TotalChildren

        [Column(@"NumberChildrenAtHome", Order = 9, TypeName = "int")]
        [Display(Name = "Number children at home")]
        public int? NumberChildrenAtHome { get; set; } // NumberChildrenAtHome

        [Column(@"Education", Order = 10, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Education")]
        public string Education { get; set; } // Education (length: 30)

        [Column(@"Occupation", Order = 11, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Occupation")]
        public string Occupation { get; set; } // Occupation (length: 30)

        [Column(@"HomeOwnerFlag", Order = 12, TypeName = "bit")]
        [Display(Name = "Home owner flag")]
        public bool? HomeOwnerFlag { get; set; } // HomeOwnerFlag

        [Column(@"NumberCarsOwned", Order = 13, TypeName = "int")]
        [Display(Name = "Number cars owned")]
        public int? NumberCarsOwned { get; set; } // NumberCarsOwned

        public Sales_VPersonDemographicEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vSalesPerson
    [Table("vSalesPerson", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VSalesPersonEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [Column(@"Title", Order = 2, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 4, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"Suffix", Order = 6, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JobTitle", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)

        [Column(@"PhoneNumber", Order = 8, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)

        [Column(@"PhoneNumberType", Order = 9, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Phone number type")]
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)

        [Column(@"EmailAddress", Order = 10, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EmailPromotion", Order = 11, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Email promotion")]
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressLine1", Order = 12, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(60)]
        [StringLength(60)]
        [Key]
        [Display(Name = "Address line 1")]
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)

        [Column(@"AddressLine2", Order = 13, TypeName = "nvarchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 2")]
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"City", Order = 14, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Key]
        [Display(Name = "City")]
        public string City { get; set; } // City (Primary key) (length: 30)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceName", Order = 15, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "State province name")]
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PostalCode", Order = 16, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Key]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionName", Order = 17, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Country region name")]
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)

        [Column(@"TerritoryName", Order = 18, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Territory name")]
        public string TerritoryName { get; set; } // TerritoryName (length: 50)

        [Column(@"TerritoryGroup", Order = 19, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Territory group")]
        public string TerritoryGroup { get; set; } // TerritoryGroup (length: 50)

        [Column(@"SalesQuota", Order = 20, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales quota")]
        public decimal? SalesQuota { get; set; } // SalesQuota

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesYTD", Order = 21, TypeName = "money")]
        [Required]
        [Key]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales ytd")]
        public decimal SalesYtd { get; set; } // SalesYTD (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesLastYear", Order = 22, TypeName = "money")]
        [Required]
        [Key]
        [DataType(DataType.Currency)]
        [Display(Name = "Sales last year")]
        public decimal SalesLastYear { get; set; } // SalesLastYear (Primary key)

        public Sales_VSalesPersonEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vSalesPersonSalesByFiscalYears
    [Table("vSalesPersonSalesByFiscalYears", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VSalesPersonSalesByFiscalYearEntity
    {
        [Column(@"SalesPersonID", Order = 1, TypeName = "int")]
        [Display(Name = "Sales person ID")]
        public int? SalesPersonId { get; set; } // SalesPersonID

        [Column(@"FullName", Order = 2, TypeName = "nvarchar")]
        [MaxLength(152)]
        [StringLength(152)]
        [Display(Name = "Full name")]
        public string FullName { get; set; } // FullName (length: 152)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JobTitle", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"SalesTerritory", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Sales territory")]
        public string SalesTerritory { get; set; } // SalesTerritory (Primary key) (length: 50)

        [Column(@"2002", Order = 5, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "2002")]
        public decimal? C2002 { get; set; } // 2002

        [Column(@"2003", Order = 6, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "2003")]
        public decimal? C2003 { get; set; } // 2003

        [Column(@"2004", Order = 7, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "2004")]
        public decimal? C2004 { get; set; } // 2004

        public Sales_VSalesPersonSalesByFiscalYearEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vStoreWithAddresses
    [Table("vStoreWithAddresses", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VStoreWithAddressEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressType", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Address type")]
        public string AddressType { get; set; } // AddressType (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressLine1", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(60)]
        [StringLength(60)]
        [Key]
        [Display(Name = "Address line 1")]
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)

        [Column(@"AddressLine2", Order = 5, TypeName = "nvarchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 2")]
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"City", Order = 6, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Key]
        [Display(Name = "City")]
        public string City { get; set; } // City (Primary key) (length: 30)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceName", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "State province name")]
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PostalCode", Order = 8, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Key]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionName", Order = 9, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Country region name")]
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)

        public Sales_VStoreWithAddressEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vStoreWithContacts
    [Table("vStoreWithContacts", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VStoreWithContactEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ContactType", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Contact type")]
        public string ContactType { get; set; } // ContactType (Primary key) (length: 50)

        [Column(@"Title", Order = 4, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 6, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"Suffix", Order = 8, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        [Column(@"PhoneNumber", Order = 9, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)

        [Column(@"PhoneNumberType", Order = 10, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Phone number type")]
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)

        [Column(@"EmailAddress", Order = 11, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EmailPromotion", Order = 12, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Email promotion")]
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)

        public Sales_VStoreWithContactEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vStoreWithDemographics
    [Table("vStoreWithDemographics", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VStoreWithDemographicEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        [Column(@"AnnualSales", Order = 3, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Annual sales")]
        public decimal? AnnualSales { get; set; } // AnnualSales

        [Column(@"AnnualRevenue", Order = 4, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Annual revenue")]
        public decimal? AnnualRevenue { get; set; } // AnnualRevenue

        [Column(@"BankName", Order = 5, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Bank name")]
        public string BankName { get; set; } // BankName (length: 50)

        [Column(@"BusinessType", Order = 6, TypeName = "nvarchar")]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Business type")]
        public string BusinessType { get; set; } // BusinessType (length: 5)

        [Column(@"YearOpened", Order = 7, TypeName = "int")]
        [Display(Name = "Year opened")]
        public int? YearOpened { get; set; } // YearOpened

        [Column(@"Specialty", Order = 8, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Specialty")]
        public string Specialty { get; set; } // Specialty (length: 50)

        [Column(@"SquareFeet", Order = 9, TypeName = "int")]
        [Display(Name = "Square feet")]
        public int? SquareFeet { get; set; } // SquareFeet

        [Column(@"Brands", Order = 10, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Brands")]
        public string Brands { get; set; } // Brands (length: 30)

        [Column(@"Internet", Order = 11, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Internet")]
        public string Internet { get; set; } // Internet (length: 30)

        [Column(@"NumberEmployees", Order = 12, TypeName = "int")]
        [Display(Name = "Number employees")]
        public int? NumberEmployees { get; set; } // NumberEmployees

        public Sales_VStoreWithDemographicEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // CountryRegionCurrency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CountryRegionCurrencyEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CountryRegionCurrencyEntity>
    {
        public Sales_CountryRegionCurrencyEntityMapping()
            : this("Sales")
        {
        }

        public Sales_CountryRegionCurrencyEntityMapping(string schema)
        {
            Property(x => x.CurrencyCode).IsFixedLength();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CreditCardEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CreditCardEntity>
    {
        public Sales_CreditCardEntityMapping()
            : this("Sales")
        {
        }

        public Sales_CreditCardEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CurrencyEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CurrencyEntity>
    {
        public Sales_CurrencyEntityMapping()
            : this("Sales")
        {
        }

        public Sales_CurrencyEntityMapping(string schema)
        {
            Property(x => x.CurrencyCode).IsFixedLength();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // CurrencyRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CurrencyRateEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CurrencyRateEntity>
    {
        public Sales_CurrencyRateEntityMapping()
            : this("Sales")
        {
        }

        public Sales_CurrencyRateEntityMapping(string schema)
        {
            Property(x => x.FromCurrencyCode).IsFixedLength();
            Property(x => x.ToCurrencyCode).IsFixedLength();
            Property(x => x.AverageRate).HasPrecision(19,4);
            Property(x => x.EndOfDayRate).HasPrecision(19,4);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_CustomerEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CustomerEntity>
    {
        public Sales_CustomerEntityMapping()
            : this("Sales")
        {
        }

        public Sales_CustomerEntityMapping(string schema)
        {
            Property(x => x.PersonId).IsOptional();
            Property(x => x.StoreId).IsOptional();
            Property(x => x.TerritoryId).IsOptional();
            Property(x => x.AccountNumber).IsUnicode(false);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PersonCreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_PersonCreditCardEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_PersonCreditCardEntity>
    {
        public Sales_PersonCreditCardEntityMapping()
            : this("Sales")
        {
        }

        public Sales_PersonCreditCardEntityMapping(string schema)
        {

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesOrderDetailEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderDetailEntity>
    {
        public Sales_SalesOrderDetailEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesOrderDetailEntityMapping(string schema)
        {
            Property(x => x.CarrierTrackingNumber).IsOptional();
            Property(x => x.UnitPrice).HasPrecision(19,4);
            Property(x => x.UnitPriceDiscount).HasPrecision(19,4);
            Property(x => x.LineTotal).HasPrecision(38,6);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesOrderHeaderEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderHeaderEntity>
    {
        public Sales_SalesOrderHeaderEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesOrderHeaderEntityMapping(string schema)
        {
            Property(x => x.ShipDate).IsOptional();
            Property(x => x.PurchaseOrderNumber).IsOptional();
            Property(x => x.AccountNumber).IsOptional();
            Property(x => x.SalesPersonId).IsOptional();
            Property(x => x.TerritoryId).IsOptional();
            Property(x => x.CreditCardId).IsOptional();
            Property(x => x.CreditCardApprovalCode).IsOptional().IsUnicode(false);
            Property(x => x.CurrencyRateId).IsOptional();
            Property(x => x.SubTotal).HasPrecision(19,4);
            Property(x => x.TaxAmt).HasPrecision(19,4);
            Property(x => x.Freight).HasPrecision(19,4);
            Property(x => x.TotalDue).HasPrecision(19,4);
            Property(x => x.Comment).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesOrderHeaderSalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesOrderHeaderSalesReasonEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderHeaderSalesReasonEntity>
    {
        public Sales_SalesOrderHeaderSalesReasonEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesOrderHeaderSalesReasonEntityMapping(string schema)
        {

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesPersonEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesPersonEntity>
    {
        public Sales_SalesPersonEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesPersonEntityMapping(string schema)
        {
            Property(x => x.TerritoryId).IsOptional();
            Property(x => x.SalesQuota).IsOptional().HasPrecision(19,4);
            Property(x => x.Bonus).HasPrecision(19,4);
            Property(x => x.CommissionPct).HasPrecision(10,4);
            Property(x => x.SalesYtd).HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasPrecision(19,4);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesPersonQuotaHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesPersonQuotaHistoryEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesPersonQuotaHistoryEntity>
    {
        public Sales_SalesPersonQuotaHistoryEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesPersonQuotaHistoryEntityMapping(string schema)
        {
            Property(x => x.SalesQuota).HasPrecision(19,4);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesReasonEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesReasonEntity>
    {
        public Sales_SalesReasonEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesReasonEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesTaxRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesTaxRateEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTaxRateEntity>
    {
        public Sales_SalesTaxRateEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesTaxRateEntityMapping(string schema)
        {
            Property(x => x.TaxRate).HasPrecision(10,4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesTerritory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesTerritoryEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTerritoryEntity>
    {
        public Sales_SalesTerritoryEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesTerritoryEntityMapping(string schema)
        {
            Property(x => x.SalesYtd).HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasPrecision(19,4);
            Property(x => x.CostYtd).HasPrecision(19,4);
            Property(x => x.CostLastYear).HasPrecision(19,4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SalesTerritoryHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SalesTerritoryHistoryEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTerritoryHistoryEntity>
    {
        public Sales_SalesTerritoryHistoryEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SalesTerritoryHistoryEntityMapping(string schema)
        {
            Property(x => x.EndDate).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ShoppingCartItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_ShoppingCartItemEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_ShoppingCartItemEntity>
    {
        public Sales_ShoppingCartItemEntityMapping()
            : this("Sales")
        {
        }

        public Sales_ShoppingCartItemEntityMapping(string schema)
        {
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SpecialOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SpecialOfferEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SpecialOfferEntity>
    {
        public Sales_SpecialOfferEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferEntityMapping(string schema)
        {
            Property(x => x.DiscountPct).HasPrecision(10,4);
            Property(x => x.MaxQty).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // SpecialOfferProduct
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_SpecialOfferProductEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SpecialOfferProductEntity>
    {
        public Sales_SpecialOfferProductEntityMapping()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferProductEntityMapping(string schema)
        {

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Store
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_StoreEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_StoreEntity>
    {
        public Sales_StoreEntityMapping()
            : this("Sales")
        {
        }

        public Sales_StoreEntityMapping(string schema)
        {
            Property(x => x.SalesPersonId).IsOptional();
            Property(x => x.Demographics).IsOptional();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vIndividualCustomer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VIndividualCustomerEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_VIndividualCustomerEntity>
    {
        public Sales_VIndividualCustomerEntityMapping()
            : this("Sales")
        {
        }

        public Sales_VIndividualCustomerEntityMapping(string schema)
        {
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.PhoneNumber).IsOptional();
            Property(x => x.PhoneNumberType).IsOptional();
            Property(x => x.EmailAddress).IsOptional();
            Property(x => x.AddressLine2).IsOptional();
            Property(x => x.Demographics).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vPersonDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VPersonDemographicEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_VPersonDemographicEntity>
    {
        public Sales_VPersonDemographicEntityMapping()
            : this("Sales")
        {
        }

        public Sales_VPersonDemographicEntityMapping(string schema)
        {
            Property(x => x.TotalPurchaseYtd).IsOptional().HasPrecision(19,4);
            Property(x => x.DateFirstPurchase).IsOptional();
            Property(x => x.BirthDate).IsOptional();
            Property(x => x.MaritalStatus).IsOptional();
            Property(x => x.YearlyIncome).IsOptional();
            Property(x => x.Gender).IsOptional();
            Property(x => x.TotalChildren).IsOptional();
            Property(x => x.NumberChildrenAtHome).IsOptional();
            Property(x => x.Education).IsOptional();
            Property(x => x.Occupation).IsOptional();
            Property(x => x.HomeOwnerFlag).IsOptional();
            Property(x => x.NumberCarsOwned).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vSalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VSalesPersonEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_VSalesPersonEntity>
    {
        public Sales_VSalesPersonEntityMapping()
            : this("Sales")
        {
        }

        public Sales_VSalesPersonEntityMapping(string schema)
        {
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.PhoneNumber).IsOptional();
            Property(x => x.PhoneNumberType).IsOptional();
            Property(x => x.EmailAddress).IsOptional();
            Property(x => x.AddressLine2).IsOptional();
            Property(x => x.TerritoryName).IsOptional();
            Property(x => x.TerritoryGroup).IsOptional();
            Property(x => x.SalesQuota).IsOptional().HasPrecision(19,4);
            Property(x => x.SalesYtd).HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasPrecision(19,4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vSalesPersonSalesByFiscalYears
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VSalesPersonSalesByFiscalYearEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_VSalesPersonSalesByFiscalYearEntity>
    {
        public Sales_VSalesPersonSalesByFiscalYearEntityMapping()
            : this("Sales")
        {
        }

        public Sales_VSalesPersonSalesByFiscalYearEntityMapping(string schema)
        {
            Property(x => x.SalesPersonId).IsOptional();
            Property(x => x.FullName).IsOptional();
            Property(x => x.C2002).IsOptional().HasPrecision(19,4);
            Property(x => x.C2003).IsOptional().HasPrecision(19,4);
            Property(x => x.C2004).IsOptional().HasPrecision(19,4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vStoreWithAddresses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VStoreWithAddressEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_VStoreWithAddressEntity>
    {
        public Sales_VStoreWithAddressEntityMapping()
            : this("Sales")
        {
        }

        public Sales_VStoreWithAddressEntityMapping(string schema)
        {
            Property(x => x.AddressLine2).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vStoreWithContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VStoreWithContactEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_VStoreWithContactEntity>
    {
        public Sales_VStoreWithContactEntityMapping()
            : this("Sales")
        {
        }

        public Sales_VStoreWithContactEntityMapping(string schema)
        {
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.PhoneNumber).IsOptional();
            Property(x => x.PhoneNumberType).IsOptional();
            Property(x => x.EmailAddress).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vStoreWithDemographics
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Sales_VStoreWithDemographicEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_VStoreWithDemographicEntity>
    {
        public Sales_VStoreWithDemographicEntityMapping()
            : this("Sales")
        {
        }

        public Sales_VStoreWithDemographicEntityMapping(string schema)
        {
            Property(x => x.AnnualSales).IsOptional().HasPrecision(19,4);
            Property(x => x.AnnualRevenue).IsOptional().HasPrecision(19,4);
            Property(x => x.BankName).IsOptional();
            Property(x => x.BusinessType).IsOptional();
            Property(x => x.YearOpened).IsOptional();
            Property(x => x.Specialty).IsOptional();
            Property(x => x.SquareFeet).IsOptional();
            Property(x => x.Brands).IsOptional();
            Property(x => x.Internet).IsOptional();
            Property(x => x.NumberEmployees).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

