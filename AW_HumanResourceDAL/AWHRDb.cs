

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AW_HumanResourceDAL\App.config"
//     Connection String Name: "AW2016_HRDB"
//     Connection String:      "Data Source=DESKTOP-PDAFJ6Q;Initial Catalog=AdventureWorks2016;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 13.0.5026.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AW_HumanResourceDAL
{
    using System.Linq;

    #region Unit of work

    public interface IHRDBContext : System.IDisposable
    {
        System.Data.Entity.DbSet<HumanResources_DepartmentEntity> HumanResources_Departments { get; set; } // Department
        System.Data.Entity.DbSet<HumanResources_EmployeeEntity> HumanResources_Employees { get; set; } // Employee
        System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistoryEntity> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        System.Data.Entity.DbSet<HumanResources_EmployeePayHistoryEntity> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory
        System.Data.Entity.DbSet<HumanResources_JobCandidateEntity> HumanResources_JobCandidates { get; set; } // JobCandidate
        System.Data.Entity.DbSet<HumanResources_ShiftEntity> HumanResources_Shifts { get; set; } // Shift
        System.Data.Entity.DbSet<HumanResources_VEmployeeEntity> HumanResources_VEmployees { get; set; } // vEmployee
        System.Data.Entity.DbSet<HumanResources_VEmployeeDepartmentEntity> HumanResources_VEmployeeDepartments { get; set; } // vEmployeeDepartment
        System.Data.Entity.DbSet<HumanResources_VEmployeeDepartmentHistoryEntity> HumanResources_VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        System.Data.Entity.DbSet<HumanResources_VJobCandidateEntity> HumanResources_VJobCandidates { get; set; } // vJobCandidate
        System.Data.Entity.DbSet<HumanResources_VJobCandidateEducationEntity> HumanResources_VJobCandidateEducations { get; set; } // vJobCandidateEducation
        System.Data.Entity.DbSet<HumanResources_VJobCandidateEmploymentEntity> HumanResources_VJobCandidateEmployments { get; set; } // vJobCandidateEmployment

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int HumanResources_UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag);
        // HumanResources_UspUpdateEmployeeHireInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int HumanResources_UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag);
        // HumanResources_UspUpdateEmployeeLoginAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int HumanResources_UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender);
        // HumanResources_UspUpdateEmployeePersonalInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HRDBContext : System.Data.Entity.DbContext, IHRDBContext
    {
        public System.Data.Entity.DbSet<HumanResources_DepartmentEntity> HumanResources_Departments { get; set; } // Department
        public System.Data.Entity.DbSet<HumanResources_EmployeeEntity> HumanResources_Employees { get; set; } // Employee
        public System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistoryEntity> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        public System.Data.Entity.DbSet<HumanResources_EmployeePayHistoryEntity> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory
        public System.Data.Entity.DbSet<HumanResources_JobCandidateEntity> HumanResources_JobCandidates { get; set; } // JobCandidate
        public System.Data.Entity.DbSet<HumanResources_ShiftEntity> HumanResources_Shifts { get; set; } // Shift
        public System.Data.Entity.DbSet<HumanResources_VEmployeeEntity> HumanResources_VEmployees { get; set; } // vEmployee
        public System.Data.Entity.DbSet<HumanResources_VEmployeeDepartmentEntity> HumanResources_VEmployeeDepartments { get; set; } // vEmployeeDepartment
        public System.Data.Entity.DbSet<HumanResources_VEmployeeDepartmentHistoryEntity> HumanResources_VEmployeeDepartmentHistories { get; set; } // vEmployeeDepartmentHistory
        public System.Data.Entity.DbSet<HumanResources_VJobCandidateEntity> HumanResources_VJobCandidates { get; set; } // vJobCandidate
        public System.Data.Entity.DbSet<HumanResources_VJobCandidateEducationEntity> HumanResources_VJobCandidateEducations { get; set; } // vJobCandidateEducation
        public System.Data.Entity.DbSet<HumanResources_VJobCandidateEmploymentEntity> HumanResources_VJobCandidateEmployments { get; set; } // vJobCandidateEmployment

        static HRDBContext()
        {
            System.Data.Entity.Database.SetInitializer<HRDBContext>(null);
        }

        public HRDBContext()
            : base("Name=AW2016_HRDB")
        {
        }

        public HRDBContext(string connectionString)
            : base(connectionString)
        {
        }

        public HRDBContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public HRDBContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public HRDBContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new HumanResources_DepartmentEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_ShiftEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentHistoryEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEducationEntityMapping());
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEmploymentEntityMapping());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new HumanResources_DepartmentEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_ShiftEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_VEmployeeDepartmentHistoryEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEducationEntityMapping(schema));
            modelBuilder.Configurations.Add(new HumanResources_VJobCandidateEmploymentEntityMapping(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int HumanResources_UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var jobTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@JobTitle", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = System.DBNull.Value;

            var hireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = System.DBNull.Value;

            var rateChangeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RateChangeDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = rateChangeDate.GetValueOrDefault() };
            if (!rateChangeDate.HasValue)
                rateChangeDateParam.Value = System.DBNull.Value;

            var rateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Rate", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = rate.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!rate.HasValue)
                rateParam.Value = System.DBNull.Value;

            var payFrequencyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PayFrequency", SqlDbType = System.Data.SqlDbType.TinyInt, Direction = System.Data.ParameterDirection.Input, Value = payFrequency.GetValueOrDefault(), Precision = 3, Scale = 0 };
            if (!payFrequency.HasValue)
                payFrequencyParam.Value = System.DBNull.Value;

            var currentFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [HumanResources].[uspUpdateEmployeeHireInfo] @BusinessEntityID, @JobTitle, @HireDate, @RateChangeDate, @Rate, @PayFrequency, @CurrentFlag", businessEntityIdParam, jobTitleParam, hireDateParam, rateChangeDateParam, rateParam, payFrequencyParam, currentFlagParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var organizationNodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrganizationNode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = organizationNode, Size = 892 };
            if (organizationNodeParam.Value == null)
                organizationNodeParam.Value = System.DBNull.Value;

            var loginIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LoginID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = loginId, Size = 256 };
            if (loginIdParam.Value == null)
                loginIdParam.Value = System.DBNull.Value;

            var jobTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@JobTitle", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = System.DBNull.Value;

            var hireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = System.DBNull.Value;

            var currentFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [HumanResources].[uspUpdateEmployeeLogin] @BusinessEntityID, @OrganizationNode, @LoginID, @JobTitle, @HireDate, @CurrentFlag", businessEntityIdParam, organizationNodeParam, loginIdParam, jobTitleParam, hireDateParam, currentFlagParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var nationalIdNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NationalIDNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = nationalIdNumber, Size = 15 };
            if (nationalIdNumberParam.Value == null)
                nationalIdNumberParam.Value = System.DBNull.Value;

            var birthDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = birthDate.GetValueOrDefault() };
            if (!birthDate.HasValue)
                birthDateParam.Value = System.DBNull.Value;

            var maritalStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = maritalStatus, Size = 1 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID, @NationalIDNumber, @BirthDate, @MaritalStatus, @Gender", businessEntityIdParam, nationalIdNumberParam, birthDateParam, maritalStatusParam, genderParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Database context factory

    public class HRDBContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<HRDBContext>
    {
        public HRDBContext Create()
        {
            return new HRDBContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeHRDBContext : IHRDBContext
    {
        public System.Data.Entity.DbSet<HumanResources_DepartmentEntity> HumanResources_Departments { get; set; }
        public System.Data.Entity.DbSet<HumanResources_EmployeeEntity> HumanResources_Employees { get; set; }
        public System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistoryEntity> HumanResources_EmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<HumanResources_EmployeePayHistoryEntity> HumanResources_EmployeePayHistories { get; set; }
        public System.Data.Entity.DbSet<HumanResources_JobCandidateEntity> HumanResources_JobCandidates { get; set; }
        public System.Data.Entity.DbSet<HumanResources_ShiftEntity> HumanResources_Shifts { get; set; }
        public System.Data.Entity.DbSet<HumanResources_VEmployeeEntity> HumanResources_VEmployees { get; set; }
        public System.Data.Entity.DbSet<HumanResources_VEmployeeDepartmentEntity> HumanResources_VEmployeeDepartments { get; set; }
        public System.Data.Entity.DbSet<HumanResources_VEmployeeDepartmentHistoryEntity> HumanResources_VEmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<HumanResources_VJobCandidateEntity> HumanResources_VJobCandidates { get; set; }
        public System.Data.Entity.DbSet<HumanResources_VJobCandidateEducationEntity> HumanResources_VJobCandidateEducations { get; set; }
        public System.Data.Entity.DbSet<HumanResources_VJobCandidateEmploymentEntity> HumanResources_VJobCandidateEmployments { get; set; }

        public FakeHRDBContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            HumanResources_Departments = new FakeDbSet<HumanResources_DepartmentEntity>("DepartmentId");
            HumanResources_Employees = new FakeDbSet<HumanResources_EmployeeEntity>("BusinessEntityId");
            HumanResources_EmployeeDepartmentHistories = new FakeDbSet<HumanResources_EmployeeDepartmentHistoryEntity>("BusinessEntityId", "StartDate", "DepartmentId", "ShiftId");
            HumanResources_EmployeePayHistories = new FakeDbSet<HumanResources_EmployeePayHistoryEntity>("BusinessEntityId", "RateChangeDate");
            HumanResources_JobCandidates = new FakeDbSet<HumanResources_JobCandidateEntity>("JobCandidateId");
            HumanResources_Shifts = new FakeDbSet<HumanResources_ShiftEntity>("ShiftId");
            HumanResources_VEmployees = new FakeDbSet<HumanResources_VEmployeeEntity>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "EmailPromotion", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            HumanResources_VEmployeeDepartments = new FakeDbSet<HumanResources_VEmployeeDepartmentEntity>("BusinessEntityId", "FirstName", "LastName", "JobTitle", "Department", "GroupName", "StartDate");
            HumanResources_VEmployeeDepartmentHistories = new FakeDbSet<HumanResources_VEmployeeDepartmentHistoryEntity>("BusinessEntityId", "FirstName", "LastName", "Shift", "Department", "GroupName", "StartDate");
            HumanResources_VJobCandidates = new FakeDbSet<HumanResources_VJobCandidateEntity>("JobCandidateId", "ModifiedDate");
            HumanResources_VJobCandidateEducations = new FakeDbSet<HumanResources_VJobCandidateEducationEntity>("JobCandidateId");
            HumanResources_VJobCandidateEmployments = new FakeDbSet<HumanResources_VJobCandidateEmploymentEntity>("JobCandidateId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int HumanResources_UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {

            return 0;
        }

        public int HumanResources_UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag)
        {

            return 0;
        }

        public int HumanResources_UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender)
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Department
    ///<summary>
    /// Lookup table containing the departments within the Adventure Works Cycles company.
    ///</summary>
    [Table("Department", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_DepartmentEntity
    {

        ///<summary>
        /// Primary key for Department records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"DepartmentID", Order = 1, TypeName = "smallint")]
        [Index(@"PK_Department_DepartmentID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Department ID")]
        public short DepartmentId { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Name of the department.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Department_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Name of the group to which the department belongs.
        ///</summary>
        [Column(@"GroupName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Group name")]
        public string GroupName { get; set; } // GroupName (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child HumanResources_EmployeeDepartmentHistories where [EmployeeDepartmentHistory].[DepartmentID] point to this entity (FK_EmployeeDepartmentHistory_Department_DepartmentID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistoryEntity> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory.FK_EmployeeDepartmentHistory_Department_DepartmentID

        public HumanResources_DepartmentEntity()
        {
            ModifiedDate = System.DateTime.Now;
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistoryEntity>();
        }
    }

    // Employee
    ///<summary>
    /// Employee information such as salary, department, and title.
    ///</summary>
    [Table("Employee", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_EmployeeEntity
    {

        ///<summary>
        /// Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Employee_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Unique national identification number such as a social security number.
        ///</summary>
        [Column(@"NationalIDNumber", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Employee_NationalIDNumber", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "National idn umber")]
        public string NationalIdNumber { get; set; } // NationalIDNumber (length: 15)

        ///<summary>
        /// Network login.
        ///</summary>
        [Column(@"LoginID", Order = 3, TypeName = "nvarchar")]
        [Index(@"AK_Employee_LoginID", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(256)]
        [StringLength(256)]
        [Display(Name = "Login ID")]
        public string LoginId { get; set; } // LoginID (length: 256)

        ///<summary>
        /// Where the employee is located in corporate hierarchy.
        ///</summary>
        [Column(@"OrganizationNode", Order = 4, TypeName = "hierarchyid")]
        [Index(@"IX_Employee_OrganizationNode", 1, IsUnique = false, IsClustered = false)]
        [Index(@"IX_Employee_OrganizationLevel_OrganizationNode", 2, IsUnique = false, IsClustered = false)]
        [Display(Name = "Organization node")]
        public System.Data.Entity.Hierarchy.HierarchyId OrganizationNode { get; set; } // OrganizationNode

        ///<summary>
        /// The depth of the employee in the corporate hierarchy.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"OrganizationLevel", Order = 5, TypeName = "smallint")]
        [Index(@"IX_Employee_OrganizationLevel_OrganizationNode", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Organization level")]
        public short? OrganizationLevel { get; private set; } // OrganizationLevel

        ///<summary>
        /// Work title such as Buyer or Sales Representative.
        ///</summary>
        [Column(@"JobTitle", Order = 6, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (length: 50)

        ///<summary>
        /// Date of birth.
        ///</summary>
        [Column(@"BirthDate", Order = 7, TypeName = "date")]
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Birth date")]
        public System.DateTime BirthDate { get; set; } // BirthDate

        ///<summary>
        /// M = Married, S = Single
        ///</summary>
        [Column(@"MaritalStatus", Order = 8, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Marital status")]
        public string MaritalStatus { get; set; } // MaritalStatus (length: 1)

        ///<summary>
        /// M = Male, F = Female
        ///</summary>
        [Column(@"Gender", Order = 9, TypeName = "nchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Gender")]
        public string Gender { get; set; } // Gender (length: 1)

        ///<summary>
        /// Employee hired on this date.
        ///</summary>
        [Column(@"HireDate", Order = 10, TypeName = "date")]
        [Required]
        [DataType(DataType.Date)]
        [Display(Name = "Hire date")]
        public System.DateTime HireDate { get; set; } // HireDate

        ///<summary>
        /// Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
        ///</summary>
        [Column(@"SalariedFlag", Order = 11, TypeName = "bit")]
        [Required]
        [Display(Name = "Salaried flag")]
        public bool SalariedFlag { get; set; } // SalariedFlag

        ///<summary>
        /// Number of available vacation hours.
        ///</summary>
        [Column(@"VacationHours", Order = 12, TypeName = "smallint")]
        [Required]
        [Display(Name = "Vacation hours")]
        public short VacationHours { get; set; } // VacationHours

        ///<summary>
        /// Number of available sick leave hours.
        ///</summary>
        [Column(@"SickLeaveHours", Order = 13, TypeName = "smallint")]
        [Required]
        [Display(Name = "Sick leave hours")]
        public short SickLeaveHours { get; set; } // SickLeaveHours

        ///<summary>
        /// 0 = Inactive, 1 = Active
        ///</summary>
        [Column(@"CurrentFlag", Order = 14, TypeName = "bit")]
        [Required]
        [Display(Name = "Current flag")]
        public bool CurrentFlag { get; set; } // CurrentFlag

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 15, TypeName = "uniqueidentifier")]
        [Index(@"AK_Employee_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 16, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child HumanResources_EmployeeDepartmentHistories where [EmployeeDepartmentHistory].[BusinessEntityID] point to this entity (FK_EmployeeDepartmentHistory_Employee_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistoryEntity> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory.FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
        /// <summary>
        /// Child HumanResources_EmployeePayHistories where [EmployeePayHistory].[BusinessEntityID] point to this entity (FK_EmployeePayHistory_Employee_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeePayHistoryEntity> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory.FK_EmployeePayHistory_Employee_BusinessEntityID
        /// <summary>
        /// Child HumanResources_JobCandidates where [JobCandidate].[BusinessEntityID] point to this entity (FK_JobCandidate_Employee_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_JobCandidateEntity> HumanResources_JobCandidates { get; set; } // JobCandidate.FK_JobCandidate_Employee_BusinessEntityID

        public HumanResources_EmployeeEntity()
        {
            SalariedFlag = true;
            VacationHours = 0;
            SickLeaveHours = 0;
            CurrentFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistoryEntity>();
            HumanResources_EmployeePayHistories = new System.Collections.Generic.List<HumanResources_EmployeePayHistoryEntity>();
            HumanResources_JobCandidates = new System.Collections.Generic.List<HumanResources_JobCandidateEntity>();
        }
    }

    // EmployeeDepartmentHistory
    ///<summary>
    /// Employee department transfers.
    ///</summary>
    [Table("EmployeeDepartmentHistory", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_EmployeeDepartmentHistoryEntity
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DepartmentID", Order = 2, TypeName = "smallint")]
        [Index(@"IX_EmployeeDepartmentHistory_DepartmentID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 3, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Department ID")]
        public short DepartmentId { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ShiftID", Order = 3, TypeName = "tinyint")]
        [Index(@"IX_EmployeeDepartmentHistory_ShiftID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 4, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Shift ID")]
        public byte ShiftId { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Date the employee started work in the department.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 4, TypeName = "date")]
        [Index(@"PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.Date)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the employee left the department. NULL = Current department.
        ///</summary>
        [Column(@"EndDate", Order = 5, TypeName = "date")]
        [DataType(DataType.Date)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [EmployeeDepartmentHistory].([BusinessEntityId]) (FK_EmployeeDepartmentHistory_Employee_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual HumanResources_EmployeeEntity HumanResources_Employee { get; set; } // FK_EmployeeDepartmentHistory_Employee_BusinessEntityID

        /// <summary>
        /// Parent HumanResources_Department pointed by [EmployeeDepartmentHistory].([DepartmentId]) (FK_EmployeeDepartmentHistory_Department_DepartmentID)
        /// </summary>
        [ForeignKey("DepartmentId"), Required] public virtual HumanResources_DepartmentEntity HumanResources_Department { get; set; } // FK_EmployeeDepartmentHistory_Department_DepartmentID

        /// <summary>
        /// Parent HumanResources_Shift pointed by [EmployeeDepartmentHistory].([ShiftId]) (FK_EmployeeDepartmentHistory_Shift_ShiftID)
        /// </summary>
        [ForeignKey("ShiftId"), Required] public virtual HumanResources_ShiftEntity HumanResources_Shift { get; set; } // FK_EmployeeDepartmentHistory_Shift_ShiftID

        public HumanResources_EmployeeDepartmentHistoryEntity()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // EmployeePayHistory
    ///<summary>
    /// Employee pay history.
    ///</summary>
    [Table("EmployeePayHistory", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_EmployeePayHistoryEntity
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_EmployeePayHistory_BusinessEntityID_RateChangeDate", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Date the change in pay is effective
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"RateChangeDate", Order = 2, TypeName = "datetime")]
        [Index(@"PK_EmployeePayHistory_BusinessEntityID_RateChangeDate", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Rate change date")]
        public System.DateTime RateChangeDate { get; set; } // RateChangeDate (Primary key)

        ///<summary>
        /// Salary hourly rate.
        ///</summary>
        [Column(@"Rate", Order = 3, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Rate")]
        public decimal Rate { get; set; } // Rate

        ///<summary>
        /// 1 = Salary received monthly, 2 = Salary received biweekly
        ///</summary>
        [Column(@"PayFrequency", Order = 4, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Pay frequency")]
        public byte PayFrequency { get; set; } // PayFrequency

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [EmployeePayHistory].([BusinessEntityId]) (FK_EmployeePayHistory_Employee_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual HumanResources_EmployeeEntity HumanResources_Employee { get; set; } // FK_EmployeePayHistory_Employee_BusinessEntityID

        public HumanResources_EmployeePayHistoryEntity()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // JobCandidate
    ///<summary>
    /// Résumés submitted to Human Resources by job applicants.
    ///</summary>
    [Table("JobCandidate", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_JobCandidateEntity
    {

        ///<summary>
        /// Primary key for JobCandidate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"JobCandidateID", Order = 1, TypeName = "int")]
        [Index(@"PK_JobCandidate_JobCandidateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Job candidate ID")]
        public int JobCandidateId { get; set; } // JobCandidateID (Primary key)

        ///<summary>
        /// Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [Column(@"BusinessEntityID", Order = 2, TypeName = "int")]
        [Index(@"IX_JobCandidate_BusinessEntityID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Business entity ID")]
        public int? BusinessEntityId { get; set; } // BusinessEntityID

        ///<summary>
        /// Résumé in XML format.
        ///</summary>
        [Column(@"Resume", Order = 3, TypeName = "xml")]
        [Display(Name = "Resume")]
        public string Resume { get; set; } // Resume

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 4, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [JobCandidate].([BusinessEntityId]) (FK_JobCandidate_Employee_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId")] public virtual HumanResources_EmployeeEntity HumanResources_Employee { get; set; } // FK_JobCandidate_Employee_BusinessEntityID

        public HumanResources_JobCandidateEntity()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Shift
    ///<summary>
    /// Work shift lookup table.
    ///</summary>
    [Table("Shift", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_ShiftEntity
    {

        ///<summary>
        /// Primary key for Shift records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ShiftID", Order = 1, TypeName = "tinyint")]
        [Index(@"PK_Shift_ShiftID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Shift ID")]
        public byte ShiftId { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Shift description.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Shift_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Shift start time.
        ///</summary>
        [Column(@"StartTime", Order = 3, TypeName = "time")]
        [Index(@"AK_Shift_StartTime_EndTime", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Start time")]
        public System.TimeSpan StartTime { get; set; } // StartTime

        ///<summary>
        /// Shift end time.
        ///</summary>
        [Column(@"EndTime", Order = 4, TypeName = "time")]
        [Index(@"AK_Shift_StartTime_EndTime", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "End time")]
        public System.TimeSpan EndTime { get; set; } // EndTime

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 5, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child HumanResources_EmployeeDepartmentHistories where [EmployeeDepartmentHistory].[ShiftID] point to this entity (FK_EmployeeDepartmentHistory_Shift_ShiftID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistoryEntity> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory.FK_EmployeeDepartmentHistory_Shift_ShiftID

        public HumanResources_ShiftEntity()
        {
            ModifiedDate = System.DateTime.Now;
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistoryEntity>();
        }
    }

    // vEmployee
    [Table("vEmployee", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VEmployeeEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [Column(@"Title", Order = 2, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 4, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"Suffix", Order = 6, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JobTitle", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)

        [Column(@"PhoneNumber", Order = 8, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)

        [Column(@"PhoneNumberType", Order = 9, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Phone number type")]
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)

        [Column(@"EmailAddress", Order = 10, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EmailPromotion", Order = 11, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Email promotion")]
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressLine1", Order = 12, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(60)]
        [StringLength(60)]
        [Key]
        [Display(Name = "Address line 1")]
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)

        [Column(@"AddressLine2", Order = 13, TypeName = "nvarchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 2")]
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"City", Order = 14, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Key]
        [Display(Name = "City")]
        public string City { get; set; } // City (Primary key) (length: 30)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceName", Order = 15, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "State province name")]
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PostalCode", Order = 16, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Key]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionName", Order = 17, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Country region name")]
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)

        [Column(@"AdditionalContactInfo", Order = 18, TypeName = "xml")]
        [Display(Name = "Additional contact info")]
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo
    }

    // vEmployeeDepartment
    [Table("vEmployeeDepartment", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VEmployeeDepartmentEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [Column(@"Title", Order = 2, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 4, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"Suffix", Order = 6, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"JobTitle", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Job title")]
        public string JobTitle { get; set; } // JobTitle (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Department", Order = 8, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Department")]
        public string Department { get; set; } // Department (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"GroupName", Order = 9, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Group name")]
        public string GroupName { get; set; } // GroupName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 10, TypeName = "date")]
        [Required]
        [Key]
        [DataType(DataType.Date)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)
    }

    // vEmployeeDepartmentHistory
    [Table("vEmployeeDepartmentHistory", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VEmployeeDepartmentHistoryEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [Column(@"Title", Order = 2, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 4, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"Suffix", Order = 6, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Shift", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Shift")]
        public string Shift { get; set; } // Shift (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Department", Order = 8, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Department")]
        public string Department { get; set; } // Department (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"GroupName", Order = 9, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Group name")]
        public string GroupName { get; set; } // GroupName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StartDate", Order = 10, TypeName = "date")]
        [Required]
        [Key]
        [DataType(DataType.Date)]
        [Display(Name = "Start date")]
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        [Column(@"EndDate", Order = 11, TypeName = "date")]
        [DataType(DataType.Date)]
        [Display(Name = "End date")]
        public System.DateTime? EndDate { get; set; } // EndDate
    }

    // vJobCandidate
    [Table("vJobCandidate", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VJobCandidateEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"JobCandidateID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Job candidate ID")]
        public int JobCandidateId { get; set; } // JobCandidateID (Primary key)

        [Column(@"BusinessEntityID", Order = 2, TypeName = "int")]
        [Display(Name = "Business entity ID")]
        public int? BusinessEntityId { get; set; } // BusinessEntityID

        [Column(@"Name.Prefix", Order = 3, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Name prefix")]
        public string Name46Prefix { get; set; } // Name.Prefix (length: 30)

        [Column(@"Name.First", Order = 4, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Name first")]
        public string Name46First { get; set; } // Name.First (length: 30)

        [Column(@"Name.Middle", Order = 5, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Name middle")]
        public string Name46Middle { get; set; } // Name.Middle (length: 30)

        [Column(@"Name.Last", Order = 6, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Name last")]
        public string Name46Last { get; set; } // Name.Last (length: 30)

        [Column(@"Name.Suffix", Order = 7, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Name suffix")]
        public string Name46Suffix { get; set; } // Name.Suffix (length: 30)

        [Column(@"Skills", Order = 8, TypeName = "nvarchar(max)")]
        [Display(Name = "Skills")]
        public string Skills { get; set; } // Skills

        [Column(@"Addr.Type", Order = 9, TypeName = "nvarchar")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Addr type")]
        public string Addr46Type { get; set; } // Addr.Type (length: 30)

        [Column(@"Addr.Loc.CountryRegion", Order = 10, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Addr loc country region")]
        public string Addr46Loc46CountryRegion { get; set; } // Addr.Loc.CountryRegion (length: 100)

        [Column(@"Addr.Loc.State", Order = 11, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Addr loc state")]
        public string Addr46Loc46State { get; set; } // Addr.Loc.State (length: 100)

        [Column(@"Addr.Loc.City", Order = 12, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Addr loc city")]
        public string Addr46Loc46City { get; set; } // Addr.Loc.City (length: 100)

        [Column(@"Addr.PostalCode", Order = 13, TypeName = "nvarchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Addr postal code")]
        public string Addr46PostalCode { get; set; } // Addr.PostalCode (length: 20)

        [Column(@"EMail", Order = 14, TypeName = "nvarchar(max)")]
        [EmailAddress]
        [Display(Name = "Em ail")]
        public string EMail { get; set; } // EMail

        [Column(@"WebSite", Order = 15, TypeName = "nvarchar(max)")]
        [Display(Name = "Web site")]
        public string WebSite { get; set; } // WebSite

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ModifiedDate", Order = 16, TypeName = "datetime")]
        [Required]
        [Key]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate (Primary key)
    }

    // vJobCandidateEducation
    [Table("vJobCandidateEducation", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VJobCandidateEducationEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"JobCandidateID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Job candidate ID")]
        public int JobCandidateId { get; set; } // JobCandidateID (Primary key)

        [Column(@"Edu.Level", Order = 2, TypeName = "nvarchar(max)")]
        [Display(Name = "Edu level")]
        public string Edu46Level { get; set; } // Edu.Level

        [Column(@"Edu.StartDate", Order = 3, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Edu start date")]
        public System.DateTime? Edu46StartDate { get; set; } // Edu.StartDate

        [Column(@"Edu.EndDate", Order = 4, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Edu end date")]
        public System.DateTime? Edu46EndDate { get; set; } // Edu.EndDate

        [Column(@"Edu.Degree", Order = 5, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Edu degree")]
        public string Edu46Degree { get; set; } // Edu.Degree (length: 50)

        [Column(@"Edu.Major", Order = 6, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Edu major")]
        public string Edu46Major { get; set; } // Edu.Major (length: 50)

        [Column(@"Edu.Minor", Order = 7, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Edu minor")]
        public string Edu46Minor { get; set; } // Edu.Minor (length: 50)

        [Column(@"Edu.GPA", Order = 8, TypeName = "nvarchar")]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Edu gpa")]
        public string Edu46Gpa { get; set; } // Edu.GPA (length: 5)

        [Column(@"Edu.GPAScale", Order = 9, TypeName = "nvarchar")]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Edu gpas cale")]
        public string Edu46GpaScale { get; set; } // Edu.GPAScale (length: 5)

        [Column(@"Edu.School", Order = 10, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Edu school")]
        public string Edu46School { get; set; } // Edu.School (length: 100)

        [Column(@"Edu.Loc.CountryRegion", Order = 11, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Edu loc country region")]
        public string Edu46Loc46CountryRegion { get; set; } // Edu.Loc.CountryRegion (length: 100)

        [Column(@"Edu.Loc.State", Order = 12, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Edu loc state")]
        public string Edu46Loc46State { get; set; } // Edu.Loc.State (length: 100)

        [Column(@"Edu.Loc.City", Order = 13, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Edu loc city")]
        public string Edu46Loc46City { get; set; } // Edu.Loc.City (length: 100)
    }

    // vJobCandidateEmployment
    [Table("vJobCandidateEmployment", Schema = "HumanResources")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VJobCandidateEmploymentEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"JobCandidateID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Job candidate ID")]
        public int JobCandidateId { get; set; } // JobCandidateID (Primary key)

        [Column(@"Emp.StartDate", Order = 2, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Emp start date")]
        public System.DateTime? Emp46StartDate { get; set; } // Emp.StartDate

        [Column(@"Emp.EndDate", Order = 3, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Emp end date")]
        public System.DateTime? Emp46EndDate { get; set; } // Emp.EndDate

        [Column(@"Emp.OrgName", Order = 4, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Emp org name")]
        public string Emp46OrgName { get; set; } // Emp.OrgName (length: 100)

        [Column(@"Emp.JobTitle", Order = 5, TypeName = "nvarchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Emp job title")]
        public string Emp46JobTitle { get; set; } // Emp.JobTitle (length: 100)

        [Column(@"Emp.Responsibility", Order = 6, TypeName = "nvarchar(max)")]
        [Display(Name = "Emp responsibility")]
        public string Emp46Responsibility { get; set; } // Emp.Responsibility

        [Column(@"Emp.FunctionCategory", Order = 7, TypeName = "nvarchar(max)")]
        [Display(Name = "Emp function category")]
        public string Emp46FunctionCategory { get; set; } // Emp.FunctionCategory

        [Column(@"Emp.IndustryCategory", Order = 8, TypeName = "nvarchar(max)")]
        [Display(Name = "Emp industry category")]
        public string Emp46IndustryCategory { get; set; } // Emp.IndustryCategory

        [Column(@"Emp.Loc.CountryRegion", Order = 9, TypeName = "nvarchar(max)")]
        [Display(Name = "Emp loc country region")]
        public string Emp46Loc46CountryRegion { get; set; } // Emp.Loc.CountryRegion

        [Column(@"Emp.Loc.State", Order = 10, TypeName = "nvarchar(max)")]
        [Display(Name = "Emp loc state")]
        public string Emp46Loc46State { get; set; } // Emp.Loc.State

        [Column(@"Emp.Loc.City", Order = 11, TypeName = "nvarchar(max)")]
        [Display(Name = "Emp loc city")]
        public string Emp46Loc46City { get; set; } // Emp.Loc.City
    }

    #endregion

    #region POCO Configuration

    // Department
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_DepartmentEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_DepartmentEntity>
    {
        public HumanResources_DepartmentEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_DepartmentEntityMapping(string schema)
        {
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_EmployeeEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_EmployeeEntity>
    {
        public HumanResources_EmployeeEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeeEntityMapping(string schema)
        {
            Property(x => x.OrganizationNode).IsOptional();
            Property(x => x.OrganizationLevel).IsOptional();
            Property(x => x.MaritalStatus).IsFixedLength();
            Property(x => x.Gender).IsFixedLength();
        }
    }

    // EmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_EmployeeDepartmentHistoryEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_EmployeeDepartmentHistoryEntity>
    {
        public HumanResources_EmployeeDepartmentHistoryEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeeDepartmentHistoryEntityMapping(string schema)
        {
            Property(x => x.EndDate).IsOptional();

        }
    }

    // EmployeePayHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_EmployeePayHistoryEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_EmployeePayHistoryEntity>
    {
        public HumanResources_EmployeePayHistoryEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeePayHistoryEntityMapping(string schema)
        {
            Property(x => x.Rate).HasPrecision(19,4);

        }
    }

    // JobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_JobCandidateEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_JobCandidateEntity>
    {
        public HumanResources_JobCandidateEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_JobCandidateEntityMapping(string schema)
        {
            Property(x => x.BusinessEntityId).IsOptional();
            Property(x => x.Resume).IsOptional();

        }
    }

    // Shift
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_ShiftEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_ShiftEntity>
    {
        public HumanResources_ShiftEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_ShiftEntityMapping(string schema)
        {
        }
    }

    // vEmployee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VEmployeeEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_VEmployeeEntity>
    {
        public HumanResources_VEmployeeEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_VEmployeeEntityMapping(string schema)
        {
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.PhoneNumber).IsOptional();
            Property(x => x.PhoneNumberType).IsOptional();
            Property(x => x.EmailAddress).IsOptional();
            Property(x => x.AddressLine2).IsOptional();
            Property(x => x.AdditionalContactInfo).IsOptional();
        }
    }

    // vEmployeeDepartment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VEmployeeDepartmentEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_VEmployeeDepartmentEntity>
    {
        public HumanResources_VEmployeeDepartmentEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_VEmployeeDepartmentEntityMapping(string schema)
        {
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
        }
    }

    // vEmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VEmployeeDepartmentHistoryEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_VEmployeeDepartmentHistoryEntity>
    {
        public HumanResources_VEmployeeDepartmentHistoryEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_VEmployeeDepartmentHistoryEntityMapping(string schema)
        {
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.EndDate).IsOptional();
        }
    }

    // vJobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VJobCandidateEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_VJobCandidateEntity>
    {
        public HumanResources_VJobCandidateEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_VJobCandidateEntityMapping(string schema)
        {
            Property(x => x.BusinessEntityId).IsOptional();
            Property(x => x.Name46Prefix).IsOptional();
            Property(x => x.Name46First).IsOptional();
            Property(x => x.Name46Middle).IsOptional();
            Property(x => x.Name46Last).IsOptional();
            Property(x => x.Name46Suffix).IsOptional();
            Property(x => x.Skills).IsOptional();
            Property(x => x.Addr46Type).IsOptional();
            Property(x => x.Addr46Loc46CountryRegion).IsOptional();
            Property(x => x.Addr46Loc46State).IsOptional();
            Property(x => x.Addr46Loc46City).IsOptional();
            Property(x => x.Addr46PostalCode).IsOptional();
            Property(x => x.EMail).IsOptional();
            Property(x => x.WebSite).IsOptional();
        }
    }

    // vJobCandidateEducation
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VJobCandidateEducationEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_VJobCandidateEducationEntity>
    {
        public HumanResources_VJobCandidateEducationEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_VJobCandidateEducationEntityMapping(string schema)
        {
            Property(x => x.Edu46Level).IsOptional();
            Property(x => x.Edu46StartDate).IsOptional();
            Property(x => x.Edu46EndDate).IsOptional();
            Property(x => x.Edu46Degree).IsOptional();
            Property(x => x.Edu46Major).IsOptional();
            Property(x => x.Edu46Minor).IsOptional();
            Property(x => x.Edu46Gpa).IsOptional();
            Property(x => x.Edu46GpaScale).IsOptional();
            Property(x => x.Edu46School).IsOptional();
            Property(x => x.Edu46Loc46CountryRegion).IsOptional();
            Property(x => x.Edu46Loc46State).IsOptional();
            Property(x => x.Edu46Loc46City).IsOptional();
        }
    }

    // vJobCandidateEmployment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class HumanResources_VJobCandidateEmploymentEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_VJobCandidateEmploymentEntity>
    {
        public HumanResources_VJobCandidateEmploymentEntityMapping()
            : this("HumanResources")
        {
        }

        public HumanResources_VJobCandidateEmploymentEntityMapping(string schema)
        {
            Property(x => x.Emp46StartDate).IsOptional();
            Property(x => x.Emp46EndDate).IsOptional();
            Property(x => x.Emp46OrgName).IsOptional();
            Property(x => x.Emp46JobTitle).IsOptional();
            Property(x => x.Emp46Responsibility).IsOptional();
            Property(x => x.Emp46FunctionCategory).IsOptional();
            Property(x => x.Emp46IndustryCategory).IsOptional();
            Property(x => x.Emp46Loc46CountryRegion).IsOptional();
            Property(x => x.Emp46Loc46State).IsOptional();
            Property(x => x.Emp46Loc46City).IsOptional();
        }
    }

    #endregion

    #region Stored procedure return models

    #endregion

}
// </auto-generated>

