

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AW_PurchasingDAL\App.config"
//     Connection String Name: "AW2016_PurchDb"
//     Connection String:      "Data Source=DESKTOP-PDAFJ6Q;Initial Catalog=AdventureWorks2016;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 13.0.5026.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AW_PurchasingDAL
{
    using System.Linq;

    #region Unit of work

    public partial interface IPurchDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Purchasing_ProductVendorEntity> Purchasing_ProductVendors { get; set; } // ProductVendor
        System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetailEntity> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeaderEntity> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        System.Data.Entity.DbSet<Purchasing_ShipMethodEntity> Purchasing_ShipMethods { get; set; } // ShipMethod
        System.Data.Entity.DbSet<Purchasing_VendorEntity> Purchasing_Vendors { get; set; } // Vendor
        System.Data.Entity.DbSet<Purchasing_VVendorWithAddressEntity> Purchasing_VVendorWithAddresses { get; set; } // vVendorWithAddresses
        System.Data.Entity.DbSet<Purchasing_VVendorWithContactEntity> Purchasing_VVendorWithContacts { get; set; } // vVendorWithContacts

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class PurchDbContext : System.Data.Entity.DbContext, IPurchDbContext
    {
        public System.Data.Entity.DbSet<Purchasing_ProductVendorEntity> Purchasing_ProductVendors { get; set; } // ProductVendor
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetailEntity> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeaderEntity> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        public System.Data.Entity.DbSet<Purchasing_ShipMethodEntity> Purchasing_ShipMethods { get; set; } // ShipMethod
        public System.Data.Entity.DbSet<Purchasing_VendorEntity> Purchasing_Vendors { get; set; } // Vendor
        public System.Data.Entity.DbSet<Purchasing_VVendorWithAddressEntity> Purchasing_VVendorWithAddresses { get; set; } // vVendorWithAddresses
        public System.Data.Entity.DbSet<Purchasing_VVendorWithContactEntity> Purchasing_VVendorWithContacts { get; set; } // vVendorWithContacts

        static PurchDbContext()
        {
            System.Data.Entity.Database.SetInitializer<PurchDbContext>(null);
        }

        public PurchDbContext()
            : base("Name=AW2016_PurchDb")
        {
            InitializePartial();
        }

        public PurchDbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public PurchDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public PurchDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public PurchDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new Purchasing_ProductVendorEntityMapping());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailEntityMapping());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderEntityMapping());
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodEntityMapping());
            modelBuilder.Configurations.Add(new Purchasing_VendorEntityMapping());
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithAddressEntityMapping());
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithContactEntityMapping());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new Purchasing_ProductVendorEntityMapping(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailEntityMapping(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderEntityMapping(schema));
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodEntityMapping(schema));
            modelBuilder.Configurations.Add(new Purchasing_VendorEntityMapping(schema));
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithAddressEntityMapping(schema));
            modelBuilder.Configurations.Add(new Purchasing_VVendorWithContactEntityMapping(schema));
            OnCreateModelPartial(modelBuilder, schema);
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
		static partial void OnCreateModelPartial(System.Data.Entity.DbModelBuilder modelBuilder, string schema);        
    }
    #endregion

    #region Database context factory

    public partial class PurchDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<PurchDbContext>
    {
        public PurchDbContext Create()
        {
            return new PurchDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakePurchDbContext : IPurchDbContext
    {
        public System.Data.Entity.DbSet<Purchasing_ProductVendorEntity> Purchasing_ProductVendors { get; set; }
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetailEntity> Purchasing_PurchaseOrderDetails { get; set; }
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeaderEntity> Purchasing_PurchaseOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<Purchasing_ShipMethodEntity> Purchasing_ShipMethods { get; set; }
        public System.Data.Entity.DbSet<Purchasing_VendorEntity> Purchasing_Vendors { get; set; }
        public System.Data.Entity.DbSet<Purchasing_VVendorWithAddressEntity> Purchasing_VVendorWithAddresses { get; set; }
        public System.Data.Entity.DbSet<Purchasing_VVendorWithContactEntity> Purchasing_VVendorWithContacts { get; set; }

        public FakePurchDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Purchasing_ProductVendors = new FakeDbSet<Purchasing_ProductVendorEntity>("ProductId", "BusinessEntityId");
            Purchasing_PurchaseOrderDetails = new FakeDbSet<Purchasing_PurchaseOrderDetailEntity>("PurchaseOrderId", "PurchaseOrderDetailId");
            Purchasing_PurchaseOrderHeaders = new FakeDbSet<Purchasing_PurchaseOrderHeaderEntity>("PurchaseOrderId");
            Purchasing_ShipMethods = new FakeDbSet<Purchasing_ShipMethodEntity>("ShipMethodId");
            Purchasing_Vendors = new FakeDbSet<Purchasing_VendorEntity>("BusinessEntityId");
            Purchasing_VVendorWithAddresses = new FakeDbSet<Purchasing_VVendorWithAddressEntity>("BusinessEntityId", "Name", "AddressType", "AddressLine1", "City", "StateProvinceName", "PostalCode", "CountryRegionName");
            Purchasing_VVendorWithContacts = new FakeDbSet<Purchasing_VVendorWithContactEntity>("BusinessEntityId", "Name", "ContactType", "FirstName", "LastName", "EmailPromotion");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();

            InitializePartial();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }

        partial void InitializePartial();
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ProductVendor
    ///<summary>
    /// Cross-reference table mapping vendors with the products they supply.
    ///</summary>
    [Table("ProductVendor", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_ProductVendorEntity
    {

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductVendor_ProductID_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 2, TypeName = "int")]
        [Index(@"IX_ProductVendor_BusinessEntityID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_ProductVendor_ProductID_BusinessEntityID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
        ///</summary>
        [Column(@"AverageLeadTime", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Average lead time")]
        public int AverageLeadTime { get; set; } // AverageLeadTime

        ///<summary>
        /// The vendor&apos;s usual selling price.
        ///</summary>
        [Column(@"StandardPrice", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Standard price")]
        public decimal StandardPrice { get; set; } // StandardPrice

        ///<summary>
        /// The selling price when last purchased.
        ///</summary>
        [Column(@"LastReceiptCost", Order = 5, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Last receipt cost")]
        public decimal? LastReceiptCost { get; set; } // LastReceiptCost

        ///<summary>
        /// Date the product was last received by the vendor.
        ///</summary>
        [Column(@"LastReceiptDate", Order = 6, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Last receipt date")]
        public System.DateTime? LastReceiptDate { get; set; } // LastReceiptDate

        ///<summary>
        /// The maximum quantity that should be ordered.
        ///</summary>
        [Column(@"MinOrderQty", Order = 7, TypeName = "int")]
        [Required]
        [Display(Name = "Min order qty")]
        public int MinOrderQty { get; set; } // MinOrderQty

        ///<summary>
        /// The minimum quantity that should be ordered.
        ///</summary>
        [Column(@"MaxOrderQty", Order = 8, TypeName = "int")]
        [Required]
        [Display(Name = "Max order qty")]
        public int MaxOrderQty { get; set; } // MaxOrderQty

        ///<summary>
        /// The quantity currently on order.
        ///</summary>
        [Column(@"OnOrderQty", Order = 9, TypeName = "int")]
        [Display(Name = "On order qty")]
        public int? OnOrderQty { get; set; } // OnOrderQty

        ///<summary>
        /// The product&apos;s unit of measure.
        ///</summary>
        [Column(@"UnitMeasureCode", Order = 10, TypeName = "nchar")]
        [Index(@"IX_ProductVendor_UnitMeasureCode", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Unit measure code")]
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Purchasing_Vendor pointed by [ProductVendor].([BusinessEntityId]) (FK_ProductVendor_Vendor_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Purchasing_VendorEntity Purchasing_Vendor { get; set; } // FK_ProductVendor_Vendor_BusinessEntityID

        public Purchasing_ProductVendorEntity()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PurchaseOrderDetail
    ///<summary>
    /// Individual products associated with a specific purchase order. See PurchaseOrderHeader.
    ///</summary>
    [Table("PurchaseOrderDetail", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_PurchaseOrderDetailEntity
    {

        ///<summary>
        /// Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PurchaseOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Purchase order ID")]
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Primary key. One line number per purchased product.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"PurchaseOrderDetailID", Order = 2, TypeName = "int")]
        [Index(@"PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Purchase order detail ID")]
        public int PurchaseOrderDetailId { get; set; } // PurchaseOrderDetailID (Primary key)

        ///<summary>
        /// Date the product is expected to be received.
        ///</summary>
        [Column(@"DueDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Due date")]
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Quantity ordered.
        ///</summary>
        [Column(@"OrderQty", Order = 4, TypeName = "smallint")]
        [Required]
        [Display(Name = "Order qty")]
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        [Column(@"ProductID", Order = 5, TypeName = "int")]
        [Index(@"IX_PurchaseOrderDetail_ProductID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Product ID")]
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Vendor&apos;s selling price of a single product.
        ///</summary>
        [Column(@"UnitPrice", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Unit price")]
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Per product subtotal. Computed as OrderQty * UnitPrice.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"LineTotal", Order = 7, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Line total")]
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// Quantity actually received from the vendor.
        ///</summary>
        [Column(@"ReceivedQty", Order = 8, TypeName = "decimal")]
        [Required]
        [Display(Name = "Received qty")]
        public decimal ReceivedQty { get; set; } // ReceivedQty

        ///<summary>
        /// Quantity rejected during inspection.
        ///</summary>
        [Column(@"RejectedQty", Order = 9, TypeName = "decimal")]
        [Required]
        [Display(Name = "Rejected qty")]
        public decimal RejectedQty { get; set; } // RejectedQty

        ///<summary>
        /// Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"StockedQty", Order = 10, TypeName = "decimal")]
        [Display(Name = "Stocked qty")]
        public decimal StockedQty { get; private set; } // StockedQty

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Purchasing_PurchaseOrderHeader pointed by [PurchaseOrderDetail].([PurchaseOrderId]) (FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID)
        /// </summary>
        [ForeignKey("PurchaseOrderId"), Required] public virtual Purchasing_PurchaseOrderHeaderEntity Purchasing_PurchaseOrderHeader { get; set; } // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID

        public Purchasing_PurchaseOrderDetailEntity()
        {
            ModifiedDate = System.DateTime.Now;
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // PurchaseOrderHeader
    ///<summary>
    /// General purchase order information. See PurchaseOrderDetail.
    ///</summary>
    [Table("PurchaseOrderHeader", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_PurchaseOrderHeaderEntity
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"PurchaseOrderID", Order = 1, TypeName = "int")]
        [Index(@"PK_PurchaseOrderHeader_PurchaseOrderID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Purchase order ID")]
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the purchase order over time.
        ///</summary>
        [Column(@"RevisionNumber", Order = 2, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Revision number")]
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
        ///</summary>
        [Column(@"Status", Order = 3, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Status")]
        public byte Status { get; set; } // Status

        ///<summary>
        /// Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        [Column(@"EmployeeID", Order = 4, TypeName = "int")]
        [Index(@"IX_PurchaseOrderHeader_EmployeeID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Employee ID")]
        public int EmployeeId { get; set; } // EmployeeID

        ///<summary>
        /// Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        [Column(@"VendorID", Order = 5, TypeName = "int")]
        [Index(@"IX_PurchaseOrderHeader_VendorID", 1, IsUnique = false, IsClustered = false)]
        [Required]
        [Display(Name = "Vendor ID")]
        public int VendorId { get; set; } // VendorID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        [Column(@"ShipMethodID", Order = 6, TypeName = "int")]
        [Required]
        [Display(Name = "Ship method ID")]
        public int ShipMethodId { get; set; } // ShipMethodID

        ///<summary>
        /// Purchase order creation date.
        ///</summary>
        [Column(@"OrderDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Order date")]
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Estimated shipment date from the vendor.
        ///</summary>
        [Column(@"ShipDate", Order = 8, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Ship date")]
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
        ///</summary>
        [Column(@"SubTotal", Order = 9, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Sub total")]
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        [Column(@"TaxAmt", Order = 10, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Tax amt")]
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        [Column(@"Freight", Order = 11, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Freight")]
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"TotalDue", Order = 12, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Total due")]
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 13, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrderDetails where [PurchaseOrderDetail].[PurchaseOrderID] point to this entity (FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderDetailEntity> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail.FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID

        // Foreign keys

        /// <summary>
        /// Parent Purchasing_ShipMethod pointed by [PurchaseOrderHeader].([ShipMethodId]) (FK_PurchaseOrderHeader_ShipMethod_ShipMethodID)
        /// </summary>
        [ForeignKey("ShipMethodId"), Required] public virtual Purchasing_ShipMethodEntity Purchasing_ShipMethod { get; set; } // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID

        /// <summary>
        /// Parent Purchasing_Vendor pointed by [PurchaseOrderHeader].([VendorId]) (FK_PurchaseOrderHeader_Vendor_VendorID)
        /// </summary>
        [ForeignKey("VendorId"), Required] public virtual Purchasing_VendorEntity Purchasing_Vendor { get; set; } // FK_PurchaseOrderHeader_Vendor_VendorID

        public Purchasing_PurchaseOrderHeaderEntity()
        {
            RevisionNumber = 0;
            Status = 1;
            OrderDate = System.DateTime.Now;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            ModifiedDate = System.DateTime.Now;
            Purchasing_PurchaseOrderDetails = new System.Collections.Generic.List<Purchasing_PurchaseOrderDetailEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // ShipMethod
    ///<summary>
    /// Shipping company lookup table.
    ///</summary>
    [Table("ShipMethod", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_ShipMethodEntity
    {

        ///<summary>
        /// Primary key for ShipMethod records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ShipMethodID", Order = 1, TypeName = "int")]
        [Index(@"PK_ShipMethod_ShipMethodID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Ship method ID")]
        public int ShipMethodId { get; set; } // ShipMethodID (Primary key)

        ///<summary>
        /// Shipping company name.
        ///</summary>
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_ShipMethod_Name", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Minimum shipping charge.
        ///</summary>
        [Column(@"ShipBase", Order = 3, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Ship base")]
        public decimal ShipBase { get; set; } // ShipBase

        ///<summary>
        /// Shipping charge per pound.
        ///</summary>
        [Column(@"ShipRate", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Ship rate")]
        public decimal ShipRate { get; set; } // ShipRate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 5, TypeName = "uniqueidentifier")]
        [Index(@"AK_ShipMethod_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 6, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_PurchaseOrderHeaders where [PurchaseOrderHeader].[ShipMethodID] point to this entity (FK_PurchaseOrderHeader_ShipMethod_ShipMethodID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeaderEntity> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_ShipMethod_ShipMethodID

        public Purchasing_ShipMethodEntity()
        {
            ShipBase = 0.00m;
            ShipRate = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeaderEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // Vendor
    ///<summary>
    /// Companies from whom Adventure Works Cycles purchases parts or other goods.
    ///</summary>
    [Table("Vendor", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_VendorEntity
    {

        ///<summary>
        /// Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Index(@"PK_Vendor_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Vendor account (identification) number.
        ///</summary>
        [Column(@"AccountNumber", Order = 2, TypeName = "nvarchar")]
        [Index(@"AK_Vendor_AccountNumber", 1, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Display(Name = "Account number")]
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Company name.
        ///</summary>
        [Column(@"Name", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
        ///</summary>
        [Column(@"CreditRating", Order = 4, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Credit rating")]
        public byte CreditRating { get; set; } // CreditRating

        ///<summary>
        /// 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
        ///</summary>
        [Column(@"PreferredVendorStatus", Order = 5, TypeName = "bit")]
        [Required]
        [Display(Name = "Preferred vendor status")]
        public bool PreferredVendorStatus { get; set; } // PreferredVendorStatus

        ///<summary>
        /// 0 = Vendor no longer used. 1 = Vendor is actively used.
        ///</summary>
        [Column(@"ActiveFlag", Order = 6, TypeName = "bit")]
        [Required]
        [Display(Name = "Active flag")]
        public bool ActiveFlag { get; set; } // ActiveFlag

        ///<summary>
        /// Vendor URL.
        ///</summary>
        [Column(@"PurchasingWebServiceURL", Order = 7, TypeName = "nvarchar")]
        [MaxLength(1024)]
        [StringLength(1024)]
        [Display(Name = "Purchasing web service url")]
        public string PurchasingWebServiceUrl { get; set; } // PurchasingWebServiceURL (length: 1024)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 8, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Purchasing_ProductVendors where [ProductVendor].[BusinessEntityID] point to this entity (FK_ProductVendor_Vendor_BusinessEntityID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_ProductVendorEntity> Purchasing_ProductVendors { get; set; } // ProductVendor.FK_ProductVendor_Vendor_BusinessEntityID
        /// <summary>
        /// Child Purchasing_PurchaseOrderHeaders where [PurchaseOrderHeader].[VendorID] point to this entity (FK_PurchaseOrderHeader_Vendor_VendorID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeaderEntity> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Vendor_VendorID

        public Purchasing_VendorEntity()
        {
            PreferredVendorStatus = true;
            ActiveFlag = true;
            ModifiedDate = System.DateTime.Now;
            Purchasing_ProductVendors = new System.Collections.Generic.List<Purchasing_ProductVendorEntity>();
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeaderEntity>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vVendorWithAddresses
    [Table("vVendorWithAddresses", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_VVendorWithAddressEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressType", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Address type")]
        public string AddressType { get; set; } // AddressType (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"AddressLine1", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(60)]
        [StringLength(60)]
        [Key]
        [Display(Name = "Address line 1")]
        public string AddressLine1 { get; set; } // AddressLine1 (Primary key) (length: 60)

        [Column(@"AddressLine2", Order = 5, TypeName = "nvarchar")]
        [MaxLength(60)]
        [StringLength(60)]
        [Display(Name = "Address line 2")]
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"City", Order = 6, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(30)]
        [StringLength(30)]
        [Key]
        [Display(Name = "City")]
        public string City { get; set; } // City (Primary key) (length: 30)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"StateProvinceName", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "State province name")]
        public string StateProvinceName { get; set; } // StateProvinceName (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"PostalCode", Order = 8, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(15)]
        [StringLength(15)]
        [Key]
        [DataType(DataType.PostalCode)]
        [Display(Name = "Postal code")]
        public string PostalCode { get; set; } // PostalCode (Primary key) (length: 15)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionName", Order = 9, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Country region name")]
        public string CountryRegionName { get; set; } // CountryRegionName (Primary key) (length: 50)

        public Purchasing_VVendorWithAddressEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    // vVendorWithContacts
    [Table("vVendorWithContacts", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_VVendorWithContactEntity
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 1, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"Name", Order = 2, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (Primary key) (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ContactType", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Contact type")]
        public string ContactType { get; set; } // ContactType (Primary key) (length: 50)

        [Column(@"Title", Order = 4, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"FirstName", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (Primary key) (length: 50)

        [Column(@"MiddleName", Order = 6, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"LastName", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Key]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (Primary key) (length: 50)

        [Column(@"Suffix", Order = 8, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        [Column(@"PhoneNumber", Order = 9, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; } // PhoneNumber (length: 25)

        [Column(@"PhoneNumberType", Order = 10, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Phone number type")]
        public string PhoneNumberType { get; set; } // PhoneNumberType (length: 50)

        [Column(@"EmailAddress", Order = 11, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"EmailPromotion", Order = 12, TypeName = "int")]
        [Required]
        [Key]
        [Display(Name = "Email promotion")]
        public int EmailPromotion { get; set; } // EmailPromotion (Primary key)

        public Purchasing_VVendorWithContactEntity()
        {
            InitializePartial();
        }

        partial void InitializePartial();
    }

    #endregion

    #region POCO Configuration

    // ProductVendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_ProductVendorEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_ProductVendorEntity>
    {
        public Purchasing_ProductVendorEntityMapping()
            : this("Purchasing")
        {
        }

        public Purchasing_ProductVendorEntityMapping(string schema)
        {
            Property(x => x.StandardPrice).HasPrecision(19,4);
            Property(x => x.LastReceiptCost).IsOptional().HasPrecision(19,4);
            Property(x => x.LastReceiptDate).IsOptional();
            Property(x => x.OnOrderQty).IsOptional();
            Property(x => x.UnitMeasureCode).IsFixedLength();

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PurchaseOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_PurchaseOrderDetailEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_PurchaseOrderDetailEntity>
    {
        public Purchasing_PurchaseOrderDetailEntityMapping()
            : this("Purchasing")
        {
        }

        public Purchasing_PurchaseOrderDetailEntityMapping(string schema)
        {
            Property(x => x.UnitPrice).HasPrecision(19,4);
            Property(x => x.LineTotal).HasPrecision(19,4);
            Property(x => x.ReceivedQty).HasPrecision(8,2);
            Property(x => x.RejectedQty).HasPrecision(8,2);
            Property(x => x.StockedQty).HasPrecision(9,2);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // PurchaseOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_PurchaseOrderHeaderEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_PurchaseOrderHeaderEntity>
    {
        public Purchasing_PurchaseOrderHeaderEntityMapping()
            : this("Purchasing")
        {
        }

        public Purchasing_PurchaseOrderHeaderEntityMapping(string schema)
        {
            Property(x => x.ShipDate).IsOptional();
            Property(x => x.SubTotal).HasPrecision(19,4);
            Property(x => x.TaxAmt).HasPrecision(19,4);
            Property(x => x.Freight).HasPrecision(19,4);
            Property(x => x.TotalDue).HasPrecision(19,4);

            InitializePartial();
        }
        partial void InitializePartial();
    }

    // ShipMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_ShipMethodEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_ShipMethodEntity>
    {
        public Purchasing_ShipMethodEntityMapping()
            : this("Purchasing")
        {
        }

        public Purchasing_ShipMethodEntityMapping(string schema)
        {
            Property(x => x.ShipBase).HasPrecision(19,4);
            Property(x => x.ShipRate).HasPrecision(19,4);
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // Vendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_VendorEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_VendorEntity>
    {
        public Purchasing_VendorEntityMapping()
            : this("Purchasing")
        {
        }

        public Purchasing_VendorEntityMapping(string schema)
        {
            Property(x => x.PurchasingWebServiceUrl).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vVendorWithAddresses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_VVendorWithAddressEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_VVendorWithAddressEntity>
    {
        public Purchasing_VVendorWithAddressEntityMapping()
            : this("Purchasing")
        {
        }

        public Purchasing_VVendorWithAddressEntityMapping(string schema)
        {
            Property(x => x.AddressLine2).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    // vVendorWithContacts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public partial class Purchasing_VVendorWithContactEntityMapping : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_VVendorWithContactEntity>
    {
        public Purchasing_VVendorWithContactEntityMapping()
            : this("Purchasing")
        {
        }

        public Purchasing_VVendorWithContactEntityMapping(string schema)
        {
            Property(x => x.Title).IsOptional();
            Property(x => x.MiddleName).IsOptional();
            Property(x => x.Suffix).IsOptional();
            Property(x => x.PhoneNumber).IsOptional();
            Property(x => x.PhoneNumberType).IsOptional();
            Property(x => x.EmailAddress).IsOptional();
            InitializePartial();
        }
        partial void InitializePartial();
    }

    #endregion

}
// </auto-generated>

